<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FinalHome</title>
  <subtitle>最初的梦想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://finalhome.org/"/>
  <updated>2016-11-20T09:16:23.000Z</updated>
  <id>http://finalhome.org/</id>
  
  <author>
    <name>Leo Hui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebStorm 上手设置</title>
    <link href="http://finalhome.org/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/webstorm%E4%B8%8A%E6%89%8B%E8%AE%BE%E7%BD%AE/"/>
    <id>http://finalhome.org/开发工具/webstorm上手设置/</id>
    <published>2016-11-20T14:26:46.000Z</published>
    <updated>2016-11-20T09:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>WebStorm 是 JetBrains 出品的一个针对前端开发的 IDE，它们家的 IDE 插件系统其实是公用的，IDEA 通过插件也可以完成 前端开发。<br><a id="more"></a></p>
<h2 id="配色设置"><a href="#配色设置" class="headerlink" title="配色设置"></a>配色设置</h2><p>其实内置的配色也不错，只是我个人喜欢灰蓝系列的，且和其他几个编辑器配色保持了统一，我使用的是： <a href="http://color-themes.com/?view=theme&amp;id=563a1a7880b4acf11273ae9b" target="_blank" rel="external">Base16 Ocean</a>。下载后，通过 <code>import settings</code> 导入，一般字体默认会比较小，我们需要再对这个配色方案 <code>Save As..</code> 存为一个自定义的配色，然后修改里面的字体，字号，以及比如 js 文件下全局变量名颜色（有的默认颜色比较刺眼）。字体推荐 <code>Source Code Pro</code>， 字号选择 16。</p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>IDE 自身带了很大插件，不需要特殊安装就以及很好使用了。但是我是个折腾的人，比较注重效率问题，所以我安装了这样几个插件:</p>
<ul>
<li><a href="https://github.com/hsz/idea-gitignore" target="_blank" rel="external">.ignore</a>: 管理 ignore 文件</li>
<li><a href="https://github.com/johnlindquist/AceJump" target="_blank" rel="external">AceJump</a>: 光标快速跳转</li>
<li><a href="https://github.com/gdelmas/IntelliJDashPlugin" target="_blank" rel="external">Dash</a>: 调用 Dash 或 Zeal 文档查询工具</li>
<li><a href="https://github.com/JetBrains/ideavim" target="_blank" rel="external">IdeaVim</a>: vim-mode, 需要共享剪切板的话，配置<code>~/.ideavimrc</code></li>
<li><a href="http://www.jetbrains.com/" target="_blank" rel="external">Markdown Support</a>: 支持 Markdown 语法与预览</li>
</ul>
<h3 id="IdeaVim-设置"><a href="#IdeaVim-设置" class="headerlink" title="IdeaVim 设置"></a>IdeaVim 设置</h3><p>vim 快捷键与 WebStrom 自带的快捷键会有冲突，需要进行设置，决定在 vim-mode 下，冲突的快捷键，具体制定什么操作，具体的设置在 <code>Settings -&gt; Other Settings -&gt; Vim Emulation</code> 中。</p>
<ul>
<li><code>Ctrl + a/b/e/f/p/n</code> 保留为系统的光标移动。</li>
<li><code>ctrl + h/o/d/u</code> 作为 vim 方式</li>
</ul>
<h2 id="安装设置"><a href="#安装设置" class="headerlink" title="安装设置"></a>安装设置</h2><h3 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h3><p>默认的快捷键，可以从 <a href="https://resources.jetbrains.com/assets/products/webstorm/WebStorm_ReferenceCard.pdf" target="_blank" rel="external">WebStorm_ReferenceCard</a> 查看。</p>
<p>但是针对个人，我们可以优化这些快捷键，我优化了以下内容:</p>
<ul>
<li>Search Everything: <code>Alt+p</code></li>
<li>Find Action: <code>Ctrl+Shift+p</code></li>
<li>Close: <code>Ctrl+w</code></li>
<li>Select Next Tab: <code>Ctrl+Tab</code></li>
<li>Select Previous Tab: <code>Ctrl+Shift+Tab</code></li>
</ul>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul>
<li>Recent File: <code>cmd+e</code></li>
<li><code>gd</code>: find definition</li>
</ul>
<h2 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h2><p>通过 <code>Export Settings</code> 即可导出配置，然后下次通过 <code>Import Settings</code> 完成导入。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebStorm 是 JetBrains 出品的一个针对前端开发的 IDE，它们家的 IDE 插件系统其实是公用的，IDEA 通过插件也可以完成 前端开发。&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://finalhome.org/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="JetBrains" scheme="http://finalhome.org/tags/JetBrains/"/>
    
      <category term="WebStorm" scheme="http://finalhome.org/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title>spacemacs 下 vim 基本命令</title>
    <link href="http://finalhome.org/Emacs%E7%9B%B8%E5%85%B3/spacemacs-vim%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://finalhome.org/Emacs相关/spacemacs-vim基本命令/</id>
    <published>2016-11-19T13:00:00.000Z</published>
    <updated>2016-11-20T09:15:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>spacemacs 使用的是 <a href="https://gitorious.org/evil/pages/Home" target="_blank" rel="external">emacs: evil</a> 插件。主要是以 vim 光标移动为主，向导可以参考 vimtutor, 或者 <a href="https://github.com/syl20bnr/evil-tutor" target="_blank" rel="external">evil-tutor</a> 进行学习。<br><a id="more"></a></p>
<h2 id="vim-模式"><a href="#vim-模式" class="headerlink" title="vim 模式"></a>vim 模式</h2><h3 id="普通模式-normal-mode"><a href="#普通模式-normal-mode" class="headerlink" title="普通模式(normal-mode)"></a>普通模式(normal-mode)</h3><p>Vim启动后的默认模式, 主要移动光标，和对字符删除与替换。通过 <code>i</code> 等命令进入插入模式。</p>
<h3 id="插入模式-insert-mode"><a href="#插入模式-insert-mode" class="headerlink" title="插入模式(insert-mode)"></a>插入模式(insert-mode)</h3><p>在这个模式中，大多数按键都会向文本缓冲中插入文本。大多数新用户希望文本编辑器编辑过程中一直保持这个模式。在插入模式中，可以按ESC键回到普通模式。</p>
<h3 id="可视模式-visual-mode"><a href="#可视模式-visual-mode" class="headerlink" title="可视模式(visual-mode)"></a>可视模式(visual-mode)</h3><p>这个模式与普通模式比较相似。但是移动命令会扩大高亮的文本区域。高亮区域可以是字符、行或者是一块文本。当执行一个非移动命令时，命令会被执行到这块高亮的区域上。Vim的”文本对象”也能和移动命令一样用在这个模式中。</p>
<h3 id="选择模式-select-mode"><a href="#选择模式-select-mode" class="headerlink" title="选择模式(select-mode)"></a>选择模式(select-mode)</h3><p>这个模式和无模式编辑器的行为比较相似（Windows标准文本控件的方式）。这个模式中，可以用鼠标或者光标键高亮选择文本，不过输入任何字符的话，Vim会用这个字符替换选择的高亮文本块，并且自动进入插入模式。</p>
<h3 id="命令模式-command-mode"><a href="#命令模式-command-mode" class="headerlink" title="命令模式(command-mode)"></a>命令模式(command-mode)</h3><p>在命令行模式中可以输入会被解释成并执行的文本。例如执行命令（”:”键），搜索（”/“和”?”键）或者过滤命令（”!”键）。在命令执行之后，Vim返回到命令行模式之前的模式，通常是普通模式。</p>
<h3 id="EX-模式-ex-mode"><a href="#EX-模式-ex-mode" class="headerlink" title="EX-模式(ex-mode)"></a>EX-模式(ex-mode)</h3><p>这和命令行模式比较相似，在使用”:visual”命令离开Ex模式前，可以一次执行多条命令。</p>
<h2 id="vim-基本命令"><a href="#vim-基本命令" class="headerlink" title="vim 基本命令"></a>vim 基本命令</h2><ul>
<li><code>:</code>: 进入命令模式</li>
<li><code>esc</code>: 返回普通模式</li>
<li><code>Ctrl-o</code>: 进入衍生模式，比如插入模式下，<code>ctrl-o</code> 输入一个普通模式下的命令，执行完毕后，自动返回 插入模式。</li>
</ul>
<h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><ul>
<li><code>h,j,k,l</code>: 普通模式下，光标移动，左，下，上，右。（逆时针）</li>
<li><code>5h</code>: 重复执行5次h, 光标左移5位</li>
<li><code>0</code>: 行首</li>
<li><code>^</code>: 行首第一个非空白字符</li>
<li><code>$</code>: 行尾</li>
<li><p><code>g_</code>: 行尾最后一个非空白字符</p>
</li>
<li><p><code>w,e,b</code>: 普通模式下，光标以单词纬度移动。</p>
</li>
<li><p><code>W,E,B</code>: 同上，但是移动的单词可以包含标点。比如连字符<code>-</code></p>
</li>
<li><p><code>Ctrl-d</code>, <code>Ctrl-u</code>: 半个屏幕向下，向上滚动。</p>
</li>
<li><code>Ctrl-B, Ctrl-F</code>: 滚动一个屏幕，通常会被我覆盖，我用来定义 emacs 光标移动方式。</li>
<li><code>zt,zz,zm</code>: 使当前行，处于屏幕的顶部，中间，底部。</li>
<li><p><code>H,M,L</code>: 光标定位到当前屏幕的，顶部，中间，底部。</p>
</li>
<li><p><code>gg</code>: 定位到文本开始处</p>
</li>
<li><code>G</code>: 定位到文本最后一行</li>
<li><code>5G</code>: 移动到第五行</li>
<li><code>:5</code>: 同上，移动到指定行</li>
<li><p><code>gd</code>: 找到当前变量定义处。</p>
</li>
<li><p><code>%</code>: 跳转匹配的括号, (,{,[,],},)</p>
</li>
<li><code>()</code>: back, forword</li>
<li><code>{}</code>: back,forword paragraph</li>
<li><p><code>[{</code>,<code>]}</code>: back, forword block</p>
</li>
<li><p><code>fx,Fx</code>: x是一个字符，向后跳到x字符出现的位置</p>
</li>
<li><code>tx,Tx</code>: x是一个字符，向前跳到x字符出现的位置</li>
<li><code>*</code>: 向后跳转到当前字符相同处, spacemacs 中无效</li>
<li><code>#</code>: 向前跳转到当前字符相同处，spacemacs 中无效</li>
</ul>
<h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><ul>
<li><code>i</code>: 当前光标前插入</li>
<li><code>a</code>: 当前光标后插入</li>
<li><code>I</code>: 当前行首插入</li>
<li><code>A</code>: 当前行尾插入</li>
<li><code>o</code>: 当前行后插入</li>
<li><code>O</code>: 当前行前插入</li>
<li><p><code>wi</code>, <code>bi</code>, <code>ea</code>: 下一个单词前，单词后插入</p>
</li>
<li><p><code>r</code>: 重写当前一个字符</p>
</li>
<li><p><code>R</code>: 重写多个字符，需要手动退出</p>
</li>
<li><p><code>J</code>: 何必当前行和下一行</p>
</li>
<li><p><code>xp</code>: 交换当前和下一个字符位置</p>
</li>
<li><p><code>u</code>: undo</p>
</li>
<li><code>Ctrl+r</code>: redo</li>
<li><code>.</code>: repeat last command, 可用于 redo</li>
</ul>
<h3 id="复制，粘贴，裁切"><a href="#复制，粘贴，裁切" class="headerlink" title="复制，粘贴，裁切"></a>复制，粘贴，裁切</h3><ul>
<li><code>x</code>: 删除当前光标字符</li>
<li><code>X</code>: 删除当前光标前字符</li>
<li><code>D</code>: 删除当前行后字符</li>
<li><code>C</code>: 重写当前行后字符，就是执行了 <code>D</code>， <code>a</code></li>
<li><code>cc</code>: 重写当前行，相当于 <code>dd</code>, <code>i</code></li>
<li><code>cw</code>: 重写当前词，相当于 <code>dw</code>, <code>i</code></li>
<li><code>s</code>: 重写当前字符</li>
<li><code>S</code>: 相当于 <code>cc</code></li>
<li><code>d</code>: 执行关于删除的引导键, 比如 <code>d0</code>, <code>d$</code></li>
<li><code>dd</code>: 删除当前行</li>
<li><code>dw</code>: 向后删除当前词</li>
<li><code>db</code>: 向前删除当前词</li>
<li><p><code>ndw</code>: n表示重复执行</p>
</li>
<li><p><code>yy</code>: yank 就是拷贝的意思，拷贝当前行</p>
</li>
<li><code>yw</code>: 复制当前光标到当前词尾的字符</li>
<li><p><code>yb</code>: 复制当前光标到当前词首的字符</p>
</li>
<li><p><code>p</code>: 当前光标后粘贴</p>
</li>
<li><p><code>P</code>: 当前光标前粘贴</p>
</li>
<li><p><code>v</code>: 进入 visual 模式</p>
</li>
<li><code>V</code>: 进入visual 模式，选取单位位行</li>
<li><code>Ctrl+v</code>: 进入 visual 模式，选取单位为块</li>
<li><code>&lt;</code>: 进入 visual 模式后， 向左进行 index</li>
<li><code>&gt;</code>: 进入 visual 模式后， 向右进行 index</li>
<li><code>y</code>: 进入 visual 模式后，复制选中字符</li>
<li><code>x</code>: 进入 visual 模式后， 裁切选中字符</li>
<li><code>d</code>: 进入 visual 模式后，删除选中字符， 效果同上</li>
<li><code>~</code>: 进入 visual 模式后，将选中字符大小写交换</li>
</ul>
<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul>
<li>插入3个 go, 可使用 <code>3i go {esc}</code></li>
<li>查找当前光标后，第三个s, 可使用 <code>3fs</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spacemacs 使用的是 &lt;a href=&quot;https://gitorious.org/evil/pages/Home&quot;&gt;emacs: evil&lt;/a&gt; 插件。主要是以 vim 光标移动为主，向导可以参考 vimtutor, 或者 &lt;a href=&quot;https://github.com/syl20bnr/evil-tutor&quot;&gt;evil-tutor&lt;/a&gt; 进行学习。&lt;br&gt;
    
    </summary>
    
      <category term="Emacs相关" scheme="http://finalhome.org/categories/Emacs%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Emacs" scheme="http://finalhome.org/tags/Emacs/"/>
    
      <category term="vim" scheme="http://finalhome.org/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Atom 插件推荐</title>
    <link href="http://finalhome.org/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Atom%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>http://finalhome.org/开发工具/Atom插件推荐/</id>
    <published>2016-11-18T08:03:27.000Z</published>
    <updated>2016-11-20T07:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近将主要的编辑器从 Sublime 切换为 Atom 了。对 Atom 的插件系统还是很满意的，但是速度还是 sublime 快。配置了一段时间，列举一些有用的插件给大家。<br><a id="more"></a></p>
<p>atom 官方自带了一些插件，可以在 <code>Settings-&gt;Package-&gt;Core Package</code> 中查看，比如 <code>linter</code>, <code>language-html</code> 等都自带安装了。</p>
<h1 id="language"><a href="#language" class="headerlink" title="language"></a>language</h1><ul>
<li><a href="https://atom.io/packages/language-markdown" target="_blank" rel="external">language-markdown</a></li>
<li><a href="https://atom.io/packages/language-babel" target="_blank" rel="external">language-babel</a></li>
<li><a href="https://atom.io/packages/language-source" target="_blank" rel="external">language-source</a>: Adds basic comment, indent, and outdent patterns used as a fallback by all source files in Atom.</li>
<li><a href="https://atom.io/packages/language-vue" target="_blank" rel="external">language-vue</a>: Adds syntax highlighting and snippets to Vue component files in Atom.</li>
</ul>
<h1 id="linter"><a href="#linter" class="headerlink" title="linter"></a>linter</h1><ul>
<li><a href="https://atom.io/packages/linter" target="_blank" rel="external">linter</a></li>
<li><a href="http://atomlinter.github.io/" target="_blank" rel="external">All linter</a>: 列举了所有的 linter</li>
<li><a href="https://atom.io/packages/linter-markdown" target="_blank" rel="external">linter-markdown</a></li>
<li><a href="https://atom.io/packages/linter-csslint" target="_blank" rel="external">linter-csslint</a></li>
<li><a href="https://atom.io/packages/linter-eslint" target="_blank" rel="external">linter-eslint</a></li>
<li><a href="https://atom.io/packages/linter-htmlhint" target="_blank" rel="external">linter-htmlhint</a></li>
</ul>
<h1 id="autocomplete"><a href="#autocomplete" class="headerlink" title="autocomplete"></a>autocomplete</h1><ul>
<li><a href="https://atom.io/packages/atom-ternjs" target="_blank" rel="external">atom-ternjs</a></li>
<li><a href="https://atom.io/packages/emmet" target="_blank" rel="external">emmet</a></li>
<li><a href="https://atom.io/packages/autocomplete-plus" target="_blank" rel="external">autocomplete-plus</a>: 内置的插件</li>
<li><a href="https://atom.io/packages/autocomplete-paths" target="_blank" rel="external">autocomplete-paths</a>: 文件路径补全</li>
<li><a href="https://atom.io/packages/autocomplete-modules" target="_blank" rel="external">autocomplete-modules</a></li>
</ul>
<h1 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h1><ul>
<li><a href="https://atom.io/packages/markdown-preview" target="_blank" rel="external">markdown-preview</a>: atom 自带的预览插件，可以用下面的替换</li>
<li><a href="https://atom.io/packages/markdown-preview-plus" target="_blank" rel="external">markdown-preview-plus</a>: Markdown Preview Plus (MPP) is a fork of Markdown Preview that provides a real-time preview of markdown documents.</li>
<li><a href="https://atom.io/packages/markdown-writer" target="_blank" rel="external">markdown-writer</a>: 提供书写时的一些辅助特性</li>
<li><a href="https://atom.io/packages/tidy-markdown" target="_blank" rel="external">Tidy Markdown</a>: 文件保存的时候，帮助纠正书写错误</li>
<li><a href="https://atom.io/packages/markdown-assistant" target="_blank" rel="external">markdown-assistant</a>: 拖拽图片，自动上传云服务上。</li>
<li><a href="https://atom.io/packages/markdown-scroll-sync" target="_blank" rel="external">markdown-scroll-sync</a>: 编辑和预览同步滚动</li>
<li><a href="https://atom.io/packages/markdown-pdf" target="_blank" rel="external">markdown-pdf</a>: 生成pdf, png, jpeg 图片</li>
</ul>
<h1 id="代码书写辅助类"><a href="#代码书写辅助类" class="headerlink" title="代码书写辅助类"></a>代码书写辅助类</h1><ul>
<li><a href="https://atom.io/packages/dash" target="_blank" rel="external">dash</a>: Simple Dash documentation integration for Atom.可在 windows 下使用，客户端用 zeal 即可。</li>
<li><a href="https://atom.io/packages/docblockr" target="_blank" rel="external">docblockr</a>: 注释书写插件</li>
<li><a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a>: 代码格式化</li>
<li><a href="https://atom.io/packages/color-picker" target="_blank" rel="external">color-picker</a>: 颜色选取插件</li>
<li><a href="https://atom.io/packages/pigments" target="_blank" rel="external">pigments</a>: 颜色可视化插件</li>
<li><a href="https://atom.io/packages/elastic-tabstops" target="_blank" rel="external">elastic-tabstops</a>: An experimental implementation of Elastic tabstops for Atom</li>
<li><a href="https://atom.io/packages/hyperclick" target="_blank" rel="external">hyperclick</a>: Pluggable text-clicking UI for Atom.</li>
<li><a href="https://atom.io/packages/js-hyperclick" target="_blank" rel="external">js-hyperclick</a>: 配合上面一个插件使用</li>
<li><a href="https://atom.io/packages/regex-railroad-diagram" target="_blank" rel="external">regex-railroad-diagram</a>: 正则表达式可视化</li>
</ul>
<h1 id="适合前端的"><a href="#适合前端的" class="headerlink" title="适合前端的"></a>适合前端的</h1><ul>
<li><a href="https://atom.io/packages/atom-html-preview" target="_blank" rel="external">atom-html-preview</a></li>
<li><a href="https://atom.io/packages/open-in-browsers" target="_blank" rel="external">open-in-browsers</a></li>
<li><a href="https://atom.io/packages/css-comb" target="_blank" rel="external">css-comb</a>: 这个插件支持读取 <code>.csscomb.json</code></li>
</ul>
<h1 id="git-相关"><a href="#git-相关" class="headerlink" title="git 相关"></a>git 相关</h1><ul>
<li><a href="https://atom.io/packages/git-time-machine" target="_blank" rel="external">git-time-machine</a>: 可视化查看提交记录</li>
</ul>
<h1 id="编辑器辅助类"><a href="#编辑器辅助类" class="headerlink" title="编辑器辅助类"></a>编辑器辅助类</h1><ul>
<li><a href="https://atom.io/packages/sync-settings" target="_blank" rel="external">sync-settings</a>: 通过 gist 同步 Atom 配置</li>
<li><a href="https://atom.io/packages/editor-settings" target="_blank" rel="external">Editor-setting</a>: 不同文件打开不同扩展</li>
<li><a href="https://atom.io/packages/open-recent" target="_blank" rel="external">open-recent</a>: 查看最近打开的文件</li>
<li><a href="https://atom.io/packages/project-plus" target="_blank" rel="external">project-plus</a>: 快速切换 project</li>
<li><a href="https://atom.io/packages/advanced-open-file" target="_blank" rel="external">advanced-open-file</a>: Open and create files and directories easily.</li>
<li><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a>: 增加文件图标的显示</li>
<li><a href="https://atom.io/packages/file-icon-supplement" target="_blank" rel="external">file-icon-supplement</a>: file-icons 的提升</li>
<li><a href="https://atom.io/packages/minimap" target="_blank" rel="external">minimap</a>: 增加右侧代码预览</li>
<li><a href="https://atom.io/packages/minimap-highlight-selected" target="_blank" rel="external">minimal-highlight-selected</a>: 在右侧minimap视图中标明高亮部分</li>
<li><a href="https://atom.io/packages/tool-bar" target="_blank" rel="external">tool-bar</a>: 增加快速导航栏，类似vs code 右侧那个</li>
<li><a href="https://atom.io/packages/search?utf8=%E2%9C%93&amp;q=keyword%3Atool-bar" target="_blank" rel="external">tool-bar plugin</a>: 上面的插件只是提供功能，还需要安装对应的插件，展示具体的内容</li>
<li><a href="https://atom.io/packages/typewriter" target="_blank" rel="external">typewriter</a>: A better writing experience for Atom</li>
<li><a href="https://atom.io/packages/Zen" target="_blank" rel="external">Zen</a>: 书写的勿扰模式</li>
<li><a href="https://atom.io/packages/highlight-selected" target="_blank" rel="external">highlight-selected</a>: 高亮所选择内容</li>
<li><a href="https://atom.io/packages/highlight-line" target="_blank" rel="external">highlight-line</a>: 高亮当前行</li>
<li><a href="https://atom.io/packages/editorconfig" target="_blank" rel="external">editorconfig</a>: 编辑器格式统一插件，借助 <code>.editorconfig</code> 文件，团队开发必备</li>
<li><a href="https://atom.io/packages/vim-mode-plus" target="_blank" rel="external">vim-mode-plus</a>: vim-mode improved. 替代官方的 vim-mode</li>
<li><a href="https://atom.io/packages/vim-mode-plus-ex-mode" target="_blank" rel="external">vim-mode-plus-ex-mode</a>: 提供<code>:w</code> 类似功能，按键快捷键需要自己定义</li>
<li><a href="https://atom.io/packages/smalls" target="_blank" rel="external">smalls</a>: 光标快速跳转插件</li>
<li><a href="https://atom.io/packages/easy-motion-redux" target="_blank" rel="external">easy-motion-redux</a>: 可是区域内光标快速跳转插件</li>
<li><a href="https://atom.io/packages/wakatime" target="_blank" rel="external">wakatime</a>: 记录使用编辑器的时间，很多编辑器或IDE都有这个插件</li>
<li><a href="https://atom.io/packages/package-generator" target="_blank" rel="external">package-generator</a>: Generates and opens a new sample package or syntax theme in Atom.</li>
<li><a href="https://atom.io/packages/spacemacs-evil-keys" target="_blank" rel="external">spacemacs-evil-keys</a>: 模拟 spacemacs evil 模式, 不建议使用，如果喜欢还是直接使用spacemacs 吧</li>
<li><a href="https://atom.io/packages/proton-mode" target="_blank" rel="external">proton-mode</a>: spacemacs and sublimious style editing in Atom. (效果和上面类似，功能应该更强大)，不建议使用，如果喜欢还是直接使用spacemacs 吧。因为这个插件会建立自己的插件系统，对你以后的配置会做修改。</li>
</ul>
<h1 id="funny"><a href="#funny" class="headerlink" title="funny"></a>funny</h1><ul>
<li><a href="https://github.com/JoelBesada/activate-power-mode" target="_blank" rel="external">Activate Power Mode</a>: 打字效果，配合tickeys音效，不用买机械键盘了。</li>
</ul>
<h1 id="优秀的插件开发者"><a href="#优秀的插件开发者" class="headerlink" title="优秀的插件开发者"></a>优秀的插件开发者</h1><ul>
<li><a href="https://atom.io/users/atom" target="_blank" rel="external">atom</a>: atom 官方, 应该基本都是内置的插件</li>
<li><a href="https://atom.io/users/atom-community" target="_blank" rel="external">atom-community</a>: atom 社区</li>
<li><a href="https://atom.io/users/steelbrain/packages" target="_blank" rel="external">steelbrain’s Packages</a>: linter</li>
<li><a href="https://atom.io/users/t9md" target="_blank" rel="external">t9md</a>: vim-mode-plus</li>
</ul>
<h1 id="管理配置"><a href="#管理配置" class="headerlink" title="管理配置"></a>管理配置</h1><h2 id="配置同步"><a href="#配置同步" class="headerlink" title="配置同步"></a>配置同步</h2><p>使用上述提到的 <a href="https://atom.io/packages/sync-settings" target="_blank" rel="external">sync-settings</a> 插件完成。步骤如下:</p>
<ul>
<li>安装 sync-settings 插件</li>
<li>打开 <a href="https://github.com/settings/tokens/new" target="_blank" rel="external">Create a new personal access token</a>, 填入 <code>Token description</code> （如果快捷键或者某些配置在不同系统下不一致，建议分开多套备份）, 勾选 <code>gist</code>, 点击 <code>Generate token</code>, 完成后界面上有一串字符，可以拷贝。就是你的 <code>Personal Access Token</code></li>
<li>打开 <a href="https://gist.github.com/" target="_blank" rel="external">Create new gist</a>, 在输入框中随便填入内容。点击 <code>Create secret gist</code>. （如果你想要分享你的配置，也可以点击 publish）。完成后，选择生成文件的后缀字符，<code>gitst:xxxxx</code>， <code>xxxxx</code> 就是你的 <code>Gist Id</code>。</li>
<li>将上述两个内容，填入 <code>sync-settings</code> 中对应字段</li>
<li>通过 <code>Command Palette</code> 打开 <code>sync-settings:backup</code> 完成备份，其他功能也都是在 <code>sync-settings:</code> 命令下。</li>
<li>备份成功，Atom 右上角会有绿色弹框提示，如果失败，可以打开 <code>Toggle Developer Tools</code> 查看控制台，看是否是网络原因报错，可能需要设置代理，可以参考： <a href="https://github.com/atom-community/sync-settings/issues/273" target="_blank" rel="external">issue: Uncaught SyntaxError: Unexpected token c </a> ， 其中有人提及。</li>
</ul>
<h2 id="配置恢复"><a href="#配置恢复" class="headerlink" title="配置恢复"></a>配置恢复</h2><p>安装 <a href="https://atom.io/packages/sync-settings" target="_blank" rel="external">sync-settings</a> 插件完成后，将 settings 设置完成，通过命令 <code>sync settings: restore</code> 即可开始恢复配置，在其恢复过程中，可切换开启 <code>Toggle Developer Tools</code> 查看过程，以及是否有 package 安装失败。</p>
<h2 id="Atom-默认的配置文件"><a href="#Atom-默认的配置文件" class="headerlink" title="Atom 默认的配置文件"></a>Atom 默认的配置文件</h2><ul>
<li>init.coffee</li>
<li>config.cson</li>
<li>keymap.cson</li>
<li>snippets.cson</li>
<li>style.less</li>
</ul>
<p>但是其实还有些是插件自身的配置，比如:</p>
<ul>
<li>projects.cson: 管理切换 project 的</li>
<li>toolbar.cson: toolbar 管理</li>
<li>project.json: sync-settings 添加的</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近将主要的编辑器从 Sublime 切换为 Atom 了。对 Atom 的插件系统还是很满意的，但是速度还是 sublime 快。配置了一段时间，列举一些有用的插件给大家。&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://finalhome.org/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Atom" scheme="http://finalhome.org/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>vim下如何共享系统剪切板</title>
    <link href="http://finalhome.org/Emacs%E7%9B%B8%E5%85%B3/vim%E4%B8%8B%E5%A6%82%E4%BD%95%E5%85%B1%E4%BA%AB%E7%B3%BB%E7%BB%9F%E5%89%AA%E5%88%87%E6%9D%BF/"/>
    <id>http://finalhome.org/Emacs相关/vim下如何共享系统剪切板/</id>
    <published>2016-11-17T13:00:00.000Z</published>
    <updated>2016-11-17T13:42:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用了 spacemacs 后，其内置的 evil(vim) 模式使用了一段时间，发现对编码效率还是很有提高的。于是把自己最近用的较多的 Atom 和 WebStorm 都装上了 vim-mode。使用过程中，发现除了光标移动方式不用以外，剪切板的共享也是新手会遇到的另外一个问题。<a id="more"></a></p>
<h2 id="vim下复制与粘贴"><a href="#vim下复制与粘贴" class="headerlink" title="vim下复制与粘贴"></a>vim下复制与粘贴</h2><ul>
<li>yank: <code>y</code> 打头的一些命令，比如 <code>yy</code> 复制整行。</li>
<li>visual mode: <code>v</code> 进入 visual mode 后，可以移动光标选取内容。按 <code>y</code> 即可复制。<code>x</code> 或 <code>d</code> 即可裁切。</li>
<li>paster: <code>p</code>, 就是粘贴的意思。</li>
</ul>
<p>默认情况下 vim 是使用自己的寄存器对剪切记录作存储，与系统剪切板想独立。通过 <code>:help registers</code> 即可查看相关文档。而在使用中，可以通过 <code>:reg</code> 查看当前寄存器存储情况。</p>
<p>vim 具有9种寄存器：</p>
<ul>
<li>无名（unnamed）寄存器：””，缓存最后一次操作内容；</li>
<li>数字（numbered）寄存器：”0 ～”9，缓存最近操作内容，复制与删除有别, “0寄存器缓存最近一次复制的内容，”1-“9缓存最近9次删除内容</li>
<li>行内删除（small delete）寄存器：”-，缓存行内删除内容；</li>
<li>具名（named）寄存器：”a ～ “z或”A - “0Z，指定时可用；</li>
<li>只读（read-only）寄存器：”:,”.,”%,”#，分别缓存最近命令、最近插入文本、当前文件名、当前交替文件名；</li>
<li>表达式（expression）寄存器：”=，只读，用于执行表达式命令；</li>
<li>选择及拖拽（selection and drop）寄存器：”*,”+,”~，存取GUI选择文本，可用于与外部应用交互，使用前提为系统剪切板（clipboard）可用；</li>
<li>黑洞（black hole）寄存器：”_，不缓存操作内容（干净删除）；</li>
<li>模式寄存器（last search pattern）：”/，缓存最近的搜索模式。</li>
</ul>
<p>注意其中，<strong>第七个</strong>即系统的剪切板记录。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="quot-命令方式"><a href="#quot-命令方式" class="headerlink" title="&quot;+ 命令方式"></a><code>&quot;+</code> 命令方式</h3><p>vim 下如果系统粘贴系统剪切板的内容，使用命令 <code>&quot;+p</code> 替代 <code>p</code>。 裁切或者复制的时候，也是一样加上前缀 <code>&quot;+</code> 或 <code>&quot;*</code>。（这两个寄存器在大部分系统下是同系统剪切板的）</p>
<h3 id="Insert-方式"><a href="#Insert-方式" class="headerlink" title="Insert 方式"></a><code>Insert</code> 方式</h3><ul>
<li><code>Ctrl+Insert</code>: 调用系统粘贴</li>
<li><code>Shift+Insert</code>: 调用系统复制</li>
</ul>
<p>这种方式在某些小新键盘上找不到 <code>insert</code> 按键，就很尴尬了。所以使用频率最低。</p>
<h3 id="set-clipboard-unnamed-方式"><a href="#set-clipboard-unnamed-方式" class="headerlink" title="set clipboard=unnamed 方式"></a><code>set clipboard=unnamed</code> 方式</h3><p>这个是最直接的方式， 在 <code>~/.vimrc</code> 就是配置文件里，加上 <code>set clipboard=unnamed</code> ，使得其启动时自动执行。</p>
<h2 id="各个软件下的具体设置"><a href="#各个软件下的具体设置" class="headerlink" title="各个软件下的具体设置"></a>各个软件下的具体设置</h2><h3 id="spacemacs"><a href="#spacemacs" class="headerlink" title="spacemacs"></a>spacemacs</h3><p>貌似都可以直接读取系统剪切板，我也就安装了基本的 layer。没有对这个特殊处理。</p>
<h3 id="JetBrains-的-IDE"><a href="#JetBrains-的-IDE" class="headerlink" title="JetBrains 的 IDE"></a>JetBrains 的 IDE</h3><p>使用的插件为 <a href="https://github.com/JetBrains/ideavim" target="_blank" rel="external">ideavim</a>, 功能还是很强大的，会和 IDE 自身的快捷键有些冲突。我会将 <code>Ctrl+A/E/F/B/N/P</code> 保留作为光标快速移动方式。</p>
<p>ideavim 默认使用的是 vim 自己的寄存器，所以我们要创建一个 <code>~/.ideavimrc</code>, 将 <code>set clipboard=unnamed</code> 填入重启即可。</p>
<h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><p>使用的插件为 <a href="https://atom.io/packages/vim-mode-plus" target="_blank" rel="external">vim-mode-plus</a>, 在其设置项中，有一个选项可以控制是否使用系统剪切板。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/3961859/how-to-copy-to-clipboard-in-vim" target="_blank" rel="external">how-to-copy-to-clipboard-in-vim</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用了 spacemacs 后，其内置的 evil(vim) 模式使用了一段时间，发现对编码效率还是很有提高的。于是把自己最近用的较多的 Atom 和 WebStorm 都装上了 vim-mode。使用过程中，发现除了光标移动方式不用以外，剪切板的共享也是新手会遇到的另外一个问题。
    
    </summary>
    
      <category term="Emacs相关" scheme="http://finalhome.org/categories/Emacs%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Emacs" scheme="http://finalhome.org/tags/Emacs/"/>
    
      <category term="vim" scheme="http://finalhome.org/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建优雅的开发环境-外设篇</title>
    <link href="http://finalhome.org/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%BC%98%E9%9B%85%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83-%E5%A4%96%E8%AE%BE%E7%AF%87/"/>
    <id>http://finalhome.org/开发工具/如何搭建优雅的开发环境-外设篇/</id>
    <published>2016-11-13T14:26:46.000Z</published>
    <updated>2016-11-13T15:03:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人感觉自己的开发环境和工具使用起来比较舒服和高效，记录一下，愿能看到的朋友择优选择。先谈谈外设相关。<a id="more"></a></p>
<h2 id="主机"><a href="#主机" class="headerlink" title="主机"></a>主机</h2><p>工作和学习的机器，推荐上 MacBookPro, 然后是Windows, 因为工作中大部分软件能兼容这两个环境。但如果是完全个人的环境，也可以使用Linux，我使用过2年的 Ubuntu 发行版。</p>
<p>Mac 下， 因为是类 Unix 系统，开发环境的亲和度很强，一些软件和设置比较舒适，键位也很合理。</p>
<p>Windows 下，我会单独再添加一篇文章介绍如何搭建 windows 下高效开发环境。我们也可以在 windows 下，通过虚拟机开启一个 linux 系统使用。</p>
<p>Linux 下，自由同时也是需要较高个人能力的环境，很多问题需要自己处理。但是对开发环境支持程度最好，因为你的大部分服务器，也都是 linux 系统。</p>
<h2 id="显示器"><a href="#显示器" class="headerlink" title="显示器"></a>显示器</h2><p>推荐双显示器，不管你做什么方向的开发，一个屏幕用来开发，一个用来查看文档，或者搜索资料。应该都是极大的能帮助你提高效率。对于分辨率，1080p的推荐24寸，2k推荐27k以上，4k我没用过，不知道。</p>
<p>品牌我推荐戴尔的。因为我用过的显示器，对它的质量比较有好感，比如:</p>
<ul>
<li><a href="http://item.jd.com/493442.html" target="_blank" rel="external">U2412</a></li>
<li><a href="http://item.jd.com/2557168.html" target="_blank" rel="external">u2717D</a></li>
</ul>
<h2 id="内存与SSD"><a href="#内存与SSD" class="headerlink" title="内存与SSD"></a>内存与SSD</h2><p>这是给机器升级的性价比最高的做法了。比如我就将我 2012 年的笔记本 联想L421 从原来的 4G内存 500G机械硬盘，升级到了 8G内存 256G SSD硬盘。开机和运行速度绝对杠杠的。</p>
<h2 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h2><p>如果你是长期电脑使用者，我建议优先换一个键盘，因为这是一个长期陪伴你的东西。并且建议你修改一下键位，以及维护一套适合自己的按键操作。</p>
<ul>
<li><a href="http://test.smzdm.com/pingce/p/22706" target="_blank" rel="external">一步到位的选择——CHERRY 樱桃 MX-BOARD 6.0 游戏机械键盘体验</a></li>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzA5ODMzMzUyOA==&amp;mid=206481163&amp;idx=1&amp;sn=e8ba72ed52981aeca5e7dc38d14ed3ef&amp;scene=1#rd" target="_blank" rel="external">机械键盘配列全解惑，你想看的这里都有！</a></li>
<li><a href="https://www.zhihu.com/question/23589254" target="_blank" rel="external">好看的键盘配色</a></li>
<li><a href="https://www.zhihu.com/question/20930250" target="_blank" rel="external">哪款键盘非常适合编程写代码？</a></li>
</ul>
<h3 id="精简键位的键盘"><a href="#精简键位的键盘" class="headerlink" title="精简键位的键盘"></a>精简键位的键盘</h3><p>普通键盘，左下角顺序为 ctrl, windows, alt。在 mac 下，需要通过系统映射 windows 与 alt 键，变成 alt 和 command. 这样键位和mac 下一致。</p>
<p>我也建议大家交换 <code>Ctrl</code> 和 <code>CapsLock</code>, 特别是mac下的开发人员， ctrl 可配合 a/e/f/b/p/n 移动光标， 而mac 键盘左下角又是 fn, 使用 ctrl 作为功能键的时候，小手指真的是很难受。</p>
<p>而在 windows 下，我们可以借助 autohotkey, 模拟一些 osx 的快捷键，比如上面提到的 ctrl 移动光标方式。</p>
<p>精简键位的键盘一般有:</p>
<ul>
<li><a href="http://www.codekeyboards.com/" target="_blank" rel="external">CODE Mechanical Keyboard</a>: stackoverflow 创始人使用的。</li>
<li><a href="https://item.taobao.com/item.htm?spm=a1z10.1-c-s.w11819085-14646670237.12.CTAtvg&amp;id=530493498942" target="_blank" rel="external">WASD定制键盘</a></li>
<li><a href="http://www.pfu.fujitsu.com/hhkeyboard/" target="_blank" rel="external">HHKB</a>: 官网，有图片，日版右侧带方向按键， 且空格较短</li>
<li>HHKB Pro2 BT蓝牙无线</li>
<li>HHKB Pro2 Type-s: 与Pro2 相比，Typs S是静音版的静电容键轴，就是这么个区别，声音上的区别，手感区别不大</li>
<li>PFU HHKB LITE2 : 薄膜键盘，使用寿命不长，右下角带方向键</li>
<li>FILCO MINILA67: 蓝牙键盘， 空格较短，左右fn无法隐射</li>
<li><a href="https://detail.tmall.com/item.htm?spm=a220o.1000855.1998025129.5.H9JR04&amp;id=523386286664&amp;pvid=e2c38442-d083-4be3-a035-a06501c91cd0&amp;abbucket=_AB-M32_B19&amp;acm=03054.1003.1.1285741&amp;abtest=_AB-LR32-PR32&amp;scm=1007.12559.61743.100200300000000&amp;pos=3&amp;skuId=3166487969359" target="_blank" rel="external">IKBC poker3</a>：无功能区，左下为 ctrl, windows, alt</li>
<li><a href="https://detail.tmall.com/item.htm?spm=a220o.1000855.1998025129.5.b4Kfl9&amp;id=538282375287&amp;pvid=5c8ea555-0714-4291-a75f-e75f93448ed7&amp;abbucket=_AB-M32_B19&amp;acm=03054.1003.1.1285741&amp;abtest=_AB-LR32-PR32&amp;scm=1007.12559.61743.100200300000000&amp;pos=3&amp;skuId=3202331174611" target="_blank" rel="external">顺丰 plum/普拉姆 84/87\108静电容键盘realforce静电容结构键盘</a></li>
<li><a href="https://shop68671418.taobao.com/index.htm?spm=2013.1.w5002-9561502270.2.5VLXY5" target="_blank" rel="external">GH60 可编程定制</a></li>
<li><a href="https://geekhack.org/index.php?topic=41464.0" target="_blank" rel="external"> Topic: GH60 Group Buy (Salvage Mode: Enabled - Update in OP)  (Read 566066 times)</a></li>
</ul>
<h2 id="椅子"><a href="#椅子" class="headerlink" title="椅子"></a>椅子</h2><p>相信这是另外一个程序员比较值得投入的外设了，我目前使用的是国产的西昊品牌，800左右的价位，只能说还行。</p>
<h3 id="低端价位"><a href="#低端价位" class="headerlink" title="低端价位"></a>低端价位</h3><ul>
<li>西昊</li>
<li><a href="https://pugeruisi.tmall.com/index.htm?spm=a220o.1000855.w5002-9112283936.2.2Rr3QV" target="_blank" rel="external">普格瑞斯</a></li>
<li><a href="https://item.taobao.com/item.htm?spm=a1z10.5-c.w4002-11631786679.78.R4AmnI&amp;id=14847262019" target="_blank" rel="external">韩国DSP</a></li>
</ul>
<h3 id="中端"><a href="#中端" class="headerlink" title="中端"></a>中端</h3><p>保友家具在国内人体工学椅市场没有竞争对手，从网上找到的国产人体工学椅都无法与之匹敌。公司旗下有金豪(Ergohuman)、金尊(Brant)、金卓(Enjoy)、金爵(Vapor)和金典(Nefil)五个系列的产品。</p>
<ul>
<li>联友电脑椅Ergonor</li>
<li><a href="https://dbljj.tmall.com/index.htm?spm=a1z10.4-b.w5002-11614202910.2.7oghdw" target="_blank" rel="external">达宝利淘宝店</a></li>
<li><a href="https://songlintw.taobao.com/?spm=a1z10.1-c.0.0.oqClQj" target="_blank" rel="external">松林</a></li>
<li><a href="https://ergomax.tmall.com/?spm=a220o.1000855.1997427721.d4918089.0ns478" target="_blank" rel="external">Ergomax</a></li>
</ul>
<h3 id="高端"><a href="#高端" class="headerlink" title="高端"></a>高端</h3><ul>
<li><a href="http://www.hermanmiller.com/" target="_blank" rel="external">Herman Miller</a></li>
</ul>
<h3 id="配件"><a href="#配件" class="headerlink" title="配件"></a>配件</h3><ul>
<li>靠背</li>
<li>坐垫</li>
<li>脚踏板</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="http://www.zhihu.com/question/26490737" target="_blank" rel="external">知乎:在我们生活之中，需要一把怎样的椅子</a></li>
<li><a href="http://www.zhihu.com/question/20436327" target="_blank" rel="external">长时间坐着工作，如何选择舒服的椅子？</a></li>
<li><a href="http://post.smzdm.com/p/31398" target="_blank" rel="external">对自己的腰和颈好点吧，联友金豪+E、金卓E人体工学椅</a></li>
<li><a href="http://post.smzdm.com/p/84252" target="_blank" rel="external">SMZDM: 为了更好的坐着</a></li>
</ul>
<h2 id="午休相关"><a href="#午休相关" class="headerlink" title="午休相关"></a>午休相关</h2><p>程序员工作中，工作中最好的休息时间，就是中午的那1个小时。如何睡的舒服一点，我也可以给大家一点建议：</p>
<ul>
<li>午休床：买一个可折叠的午休床，还是躺着最舒服</li>
<li>眼罩： MUJI 的那个很舒服</li>
<li>护颈枕: MUJI 有一款， 国内 8H又出了一款。两者填充物不同，我更喜欢 8H 的乳胶</li>
<li>耳塞：有一个德国的品牌，隔音效果不错</li>
</ul>
<h2 id="数码杂项"><a href="#数码杂项" class="headerlink" title="数码杂项"></a>数码杂项</h2><ul>
<li>笔记本支架： 抬高笔记本或者显示器</li>
<li>路由器</li>
<li>NAS</li>
<li>清洗套件: Cyber Clean</li>
<li>耳机</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说的优点杂，但是该提的点应该没少，有兴趣的也可以自行搜索扩展，找到合适自己的外设。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人感觉自己的开发环境和工具使用起来比较舒服和高效，记录一下，愿能看到的朋友择优选择。先谈谈外设相关。
    
    </summary>
    
      <category term="开发工具" scheme="http://finalhome.org/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="开发者" scheme="http://finalhome.org/tags/%E5%BC%80%E5%8F%91%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>spacemacs 初体验</title>
    <link href="http://finalhome.org/Emacs%E7%9B%B8%E5%85%B3/windows%E4%B8%8B%E5%AE%89%E8%A3%85spacemacs/"/>
    <id>http://finalhome.org/Emacs相关/windows下安装spacemacs/</id>
    <published>2016-11-04T08:00:00.000Z</published>
    <updated>2016-11-05T17:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间听了代码时间的一期播客: <a href="https://codetimecn.com/episodes/emacs" target="_blank" rel="external">emacs 陈斌</a> 最近又看到了 <a href="http://spacemacs.org/" target="_blank" rel="external">spacemacs</a>： 一个结合 Emacs 与 Vim 方式的全局配置，就像 <a href="http://ohmyz.sh/" target="_blank" rel="external">oh-my-zsh</a> 基于 zsh，简单的安装既让你有种老司机的感觉。<a id="more"></a></p>
<h2 id="安装-Emacs"><a href="#安装-Emacs" class="headerlink" title="安装 Emacs"></a>安装 Emacs</h2><p>spacemacs 是基于 Emacs 的配置。所以我们要先安装 Emacs, 关于 Emacs 版本又有很多，官方下载的算是基础版本，也有一些第三方编译的版本，包含了一些常用的模块，比如图片模块。 spacemacs <a href="https://github.com/syl20bnr/spacemacs#prerequisites" target="_blank" rel="external">推荐安装的版本</a> 也是基于编译的，而不是 GNU Emacs 官方提供的下载。</p>
<p>我在 Windows 和 MacOS 下都安装了 Emacs:</p>
<ul>
<li>Windows 下使用的就是: <a href="https://sourceforge.net/projects/emacsbinw64/files/release/" target="_blank" rel="external">emacs-w64-25.1-O2-with-modules.7z</a></li>
<li>MacOs 下是通过 brew 安装的</li>
</ul>
<p>PS: 而在后续的使用过程中，其实还需要安装好 git, cygwin 等工具。</p>
<h2 id="安装-spacemacs"><a href="#安装-spacemacs" class="headerlink" title="安装 spacemacs"></a>安装 spacemacs</h2><p>由于 spacemacs 就是 emacs 的配置，所以安装它其实就是替换 <code>.emacs.d</code> 和 <code>.emacs</code>。</p>
<ol>
<li>先备份, 并删除 <code>.emacs</code> 文件：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~</div><div class="line">mv .emacs.d .emacs.d.bak</div><div class="line">mv .emacs .emacs.bak</div></pre></td></tr></table></figure>
<ol>
<li>clone 项目到 <code>.emacs.d</code> 目录：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d</div></pre></td></tr></table></figure>
<ol>
<li><p>启动 Emacs, 这里会进行 spacemacs 的初始化，问答形式完成一些基础配置， 直接全部回车即可，生成 <code>.spacemacs</code> 配置文件。</p>
</li>
<li><p>如果网络没有问题，会直接更新所有需要的模块</p>
</li>
<li><p>(可选) 下载并安装 <a href="https://github.com/adobe-fonts/source-code-pro" target="_blank" rel="external">Source Code Pro 字体</a></p>
</li>
</ol>
<p>当然，多数国内环境下，网络会出问题。所以我们可以在完成第三步后，退出 Emacs， 去修改配置文件 <code>.spacemacs</code>:</p>
<ul>
<li><code>dotspacemacs-elpa-https</code>: 设置为 <code>nil</code>, 让其走 http 协议</li>
<li><p>可添加国内镜像地址: 在 dotspacemacs/user-init 中添加:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(setq configuration-layer--elpa-archives</div><div class="line">    &apos;((&quot;melpa-cn&quot; . &quot;http://elpa.zilongshanren.com/melpa/&quot;)</div><div class="line">      (&quot;org-cn&quot;   . &quot;http://elpa.zilongshanren.com/org/&quot;)</div><div class="line">      (&quot;gnu-cn&quot;   . &quot;http://elpa.zilongshanren.com/gnu/&quot;)))</div></pre></td></tr></table></figure>
</li>
<li><p>清空 <code>.emacs.d/elpa</code> 目录</p>
</li>
<li>重启 Emacs</li>
</ul>
<p>安装模块后，下次进入启动的时候就会比较短， 欢迎界面每次会展示所有模块加载时间, 比如: <code>213 packages loaded in 4.740s (e:155 r:2 l:10 b:46)</code>, 这后面的几个字符，我单独解释下:</p>
<ul>
<li>e: elpa stats</li>
<li>r: recipe stats</li>
<li>l: local stats</li>
<li>b: build-in stats</li>
</ul>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>在 spacemacs 下有个很重要的概念，叫做引导键，用来触发组合性质的功能， <code>SPC</code> 就是这个引导键，对应键盘的是空格键。</p>
<p>光标移动使用的是 <code>vim</code> 模式， 如有不熟悉的，可以在主界面点击 ? -&gt; <code>evil tutor</code> 学习或者通过 <code>SPC SPC evil-tutor-start</code> 进入。</p>
<p>而整体的 Emacs 向导，通过 <code>SPC SPC help-with-tutorial</code> 进入。</p>
<p>一些常用的，我先列在这里：</p>
<ul>
<li>返回主页面: <code>SPC-b-h</code></li>
<li>新建缓冲区: <code>SPC-b-N</code></li>
<li>保存缓冲区: <code>SPC-f-s</code></li>
<li>显示所有缓冲区: <code>C-x C-b</code></li>
<li>切换窗口: <code>C-x o</code></li>
<li>退出: <code>C-x C-c</code></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://emacs.sexy/" target="_blank" rel="external">Emacs sexy</a></li>
<li><a href="http://sachachua.com/blog/2013/05/how-to-learn-emacs-a-hand-drawn-one-pager-for-beginners/" target="_blank" rel="external">How to Learn Emacs: A Hand-drawn One-pager for Beginners</a></li>
<li><a href="https://codetimecn.com/episodes/emacs" target="_blank" rel="external">emacs 陈斌</a></li>
<li><a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external">GNU Emacs</a></li>
<li><a href="http://spacemacs.org/" target="_blank" rel="external">spacemacs</a></li>
<li><a href="http://elpa.emacs-china.org/" target="_blank" rel="external">Emacs China: ELPA 镜像</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间听了代码时间的一期播客: &lt;a href=&quot;https://codetimecn.com/episodes/emacs&quot;&gt;emacs 陈斌&lt;/a&gt; 最近又看到了 &lt;a href=&quot;http://spacemacs.org/&quot;&gt;spacemacs&lt;/a&gt;： 一个结合 Emacs 与 Vim 方式的全局配置，就像 &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;oh-my-zsh&lt;/a&gt; 基于 zsh，简单的安装既让你有种老司机的感觉。
    
    </summary>
    
      <category term="Emacs相关" scheme="http://finalhome.org/categories/Emacs%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="Emacs" scheme="http://finalhome.org/tags/Emacs/"/>
    
  </entry>
  
  <entry>
    <title>SVN 忽略文件的设置</title>
    <link href="http://finalhome.org/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/svn%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E7%9A%84%E8%AE%BE%E7%BD%AE/"/>
    <id>http://finalhome.org/开发工具/svn忽略文件的设置/</id>
    <published>2016-09-20T09:00:00.000Z</published>
    <updated>2016-11-05T10:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>git 有 <code>.gitirnore</code> 文件来设置项目的忽略文件规则，那 SVN 呢？<a id="more"></a></p>
<p>工作中我有遇到这么一个 SVN 仓库，里面包含了多个项目，不同的人在维护。</p>
<p>而在我的项目文件中，不希望提交某些文件，比如 <code>node_modules</code>，之前我的做法是每个版本迁出的时候，手动去添加各个需要忽略的文件。我希望能有一个类似 <code>.gitignore</code> 的方式，去维护我 SVN 仓库下需要忽略的文件。</p>
<h2 id="TortoiseSVN-GUI"><a href="#TortoiseSVN-GUI" class="headerlink" title="TortoiseSVN GUI"></a>TortoiseSVN GUI</h2><p>就是那个 “小乌龟” 软件，一个 GUI 的 SVN 管理工具。</p>
<p>我们常规的做法就是对需要忽略的文件或目录，右击，选择 <code>TortoiseSVN -&gt; Add to ignore list</code> （已添加的版本管理中的也类似，菜单名会变为 <code>Unversion and add to ignore list</code>）,其中会给出两种忽略方式, 比如 <code>node_modules</code> 目录：</p>
<ul>
<li>node_modules： 只忽略当前路径下的</li>
<li>node_modules(recursive)： 忽略整个工程下的</li>
</ul>
<p>这就是我们常用的设置方式，也是我想要优化的地方。</p>
<h2 id="TortoiseSVN-Command"><a href="#TortoiseSVN-Command" class="headerlink" title="TortoiseSVN Command"></a>TortoiseSVN Command</h2><p>其实 svn 也是有对应的命令行命令的，比如 <code>svn status</code>, <code>svn update</code>, <code>svn add</code>, <code>svn commit</code> 等。对应也有文档： <a href="https://tortoisesvn.net/docs/release/TortoiseSVN_zh_CN/tsvn-cli-main.html" target="_blank" rel="external">TortoiseSVN 命令</a></p>
<p>其中就有介绍如何加入忽略列表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn propget svn:ignore PATH &gt; tempfile</div><div class="line">&#123;edit new ignore item into tempfile&#125;</div><div class="line">svn propset svn:ignore -F tempfile PATH</div></pre></td></tr></table></figure>
<p>这就是命令行下添加忽略规则的方式，我们可以看到实际是加到项目的 <code>properties</code> 中，这里使用的一个文件去维护忽略规则，<strong>这其实就是我想要的方式</strong>。</p>
<p>导入忽略规则后，我们在项目中右击，通过 <code>TortoiseSVN -&gt; Properties</code> 可以查看，修改，以及导入导出。关于忽略的两种方式，实际对应的属性也是两个：</p>
<ul>
<li><code>svn:ignore</code></li>
<li><code>svn:global-ignore</code></li>
</ul>
<h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><p>通过命令行的方式，我们可以看到忽略规则是可以被导入导出的。这样我们就可以通过文件去维护项目的忽略列表，虽然这个忽略规则不会自动被识别，但是已经可以简化我们许多人工点击的操作了。</p>
<p>操作如下：</p>
<ul>
<li>生成忽略文件, 两种方式：<ul>
<li>通过 <code>TortoiseSVN GUI</code> 方式，点击操作设置相关忽略文件</li>
<li>维护 <code>.svnignore</code> 和 <code>.svnignore-global</code> 两个文件，分别通过命令行导入</li>
</ul>
</li>
<li>在项目中右击，通过 <code>TortoiseSVN -&gt; Properties</code> 对配置导出</li>
<li>在新项目中， 通过 <code>TortoiseSVN -&gt; Properties</code> 导入配置</li>
</ul>
<p>配置导出的时候，注意全选，然后 <code>export</code> ，导出的文件是 <code>.svnprops</code>。</p>
<p>我们也可以只导出忽略规则，方式到对应的 <code>.svnignore</code> 和 <code>.svnignore-global</code> 文件中。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://tortoisesvn.net/docs/release/TortoiseSVN_zh_CN/tsvn-dug-ignore.html" target="_blank" rel="external">Tortoisesvn: 忽略文件和目录</a></li>
<li><a href="https://tortoisesvn.net/docs/release/TortoiseSVN_zh_CN/tsvn-cli-main.html#tsvn-cli-addignore" target="_blank" rel="external">Tortoisesvn 命令: 加入忽略列表</a></li>
<li><a href="http://stackoverflow.com/questions/86049/how-do-i-ignore-files-in-subversion" target="_blank" rel="external">How do I ignore files in Subversion?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 有 &lt;code&gt;.gitirnore&lt;/code&gt; 文件来设置项目的忽略文件规则，那 SVN 呢？
    
    </summary>
    
      <category term="开发工具" scheme="http://finalhome.org/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SVN" scheme="http://finalhome.org/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>gitbook 使用指南</title>
    <link href="http://finalhome.org/gitbook%E7%9B%B8%E5%85%B3/gitbook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://finalhome.org/gitbook相关/gitbook使用指南/</id>
    <published>2016-09-17T08:00:07.000Z</published>
    <updated>2016-11-05T10:00:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>我之前使用 <code>gitbook</code> 的时候还是 <code>1.x.x</code> 版本，现在都已经 <code>3.x.x</code> 了。<a id="more"></a></p>
<h2 id="什么是-GitBook"><a href="#什么是-GitBook" class="headerlink" title="什么是 GitBook"></a>什么是 GitBook</h2><p>一个致力于解决文档，书籍书写与发布的技术方案，于 2014 年中旬创立，建立了一套开源书籍的书写规范和相关的构建工具。后来也创立了一个网站，<a href="https://gitbook.com/" target="_blank" rel="external">GitBook.com</a>，供世界各地的人发布和管理自己的书籍。</p>
<h2 id="安装-GitBook"><a href="#安装-GitBook" class="headerlink" title="安装 GitBook"></a>安装 GitBook</h2><p><code>GitBook 3.x.x</code> 版本需要 <code>node &gt;=4.0.0</code>，这里插一句，大多数情况下，node 还是推荐使用 LTS 版本，最新版本的特性有些库支持还是有问题的，而且会存在不兼容的情况。</p>
<p>通过 <code>npm install gitbook-cli -g</code> 全局安装 <code>gitbook</code> 命令，安装完成后，有几个常用的命令：</p>
<ul>
<li><code>gitbook --version</code>：查看当前使用的版本</li>
<li><code>gitbook ls</code>：系统存在的 gitbook 版本</li>
<li><code>gitbook ls-remote</code>：所有 gitbook 版本</li>
<li><code>gitbook fetch</code>：下载对应的 gitbook 版本</li>
<li><code>gitbook current</code>：当前目录使用的 gitbook 版本</li>
</ul>
<p>当前版本下，默认安装的是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CLI version: 2.3.0</div><div class="line">GitBook version: 3.2.0</div></pre></td></tr></table></figure>
<p>如果我们需要使用不同的版本，需要自己安装，或者通过 <code>book.json</code> 配置 <code>gitbook</code> 版本。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;gitbook&quot;: &quot;~2.x.x&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在含有 <code>book.json</code> 的目录下运行 <code>gitbook</code> 相关命令，就是基于指定的版本了。</p>
<h3 id="查看相关命令"><a href="#查看相关命令" class="headerlink" title="查看相关命令"></a>查看相关命令</h3><p>通过 <code>gitbook</code> 和 <code>gitbook help</code> 可以查看相关的命令。</p>
<h2 id="创建书籍"><a href="#创建书籍" class="headerlink" title="创建书籍"></a>创建书籍</h2><p><code>gitbook init &lt;folder&gt;</code> 创建项目，生成：</p>
<ul>
<li>README.md</li>
<li>SUMMARY.md</li>
</ul>
<p>如果对项目需要配置，还需自行添加 <code>book.json</code> 文件。</p>
<h2 id="运行书籍"><a href="#运行书籍" class="headerlink" title="运行书籍"></a>运行书籍</h2><p><code>gitbook serve</code> 命令。</p>
<h2 id="编译书籍"><a href="#编译书籍" class="headerlink" title="编译书籍"></a>编译书籍</h2><p><code>gitbook build</code> 命令。</p>
<h2 id="SUMMARY"><a href="#SUMMARY" class="headerlink" title="SUMMARY"></a>SUMMARY</h2><p><code>SUMMARY.md</code> 是用来定义书籍的章节的，用来生成目录。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Summary</div><div class="line"></div><div class="line">* [Introduction](README.md)</div><div class="line">* [Part I](part1/README.md)</div><div class="line">    * [Writing is nice](part1/writing.md)</div><div class="line">    * [GitBook is nice](part1/gitbook.md)</div><div class="line">* [Part II](part2/README.md)</div><div class="line">    * [We love feedback](part2/feedback_please.md)</div><div class="line">    * [Better tools for authors](part2/better_tools.md)</div></pre></td></tr></table></figure>
<p>在 <code>2.x.x</code> 版本中，这样会生成目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Introduction</div><div class="line">1.Part I</div><div class="line">    1.1 Writing is nice</div><div class="line">    1.2 GitBook is nice</div><div class="line">2.Part II</div><div class="line">    2.1 We love feedback</div><div class="line">    2.2 Better tools for authors</div></pre></td></tr></table></figure>
<p><code>3.x.x</code> 版本后，默认不为章节生成硬编码，而是推荐使用 <code>Parts</code> 概念维护目录，可见：</p>
<ul>
<li><a href="https://github.com/rustcc/RustPrimer/issues/412" target="_blank" rel="external">issue：章节号没了</a></li>
<li><a href="https://github.com/GitbookIO/gitbook/pull/312" target="_blank" rel="external">issue: Multi part books</a></li>
</ul>
<p>生成的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Introduction</div><div class="line">Part I</div><div class="line">    Writing is nice</div><div class="line">    GitBook is nice</div><div class="line">Part II</div><div class="line">    We love feedback</div><div class="line">    Better tools for authors</div></pre></td></tr></table></figure>
<p>如果你想要展示章节硬编码，需要添加设置，修改 <code>book.json</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;pluginsConfig&quot;: &#123;</div><div class="line">       &quot;theme-default&quot;: &#123;</div><div class="line">           &quot;showLevel&quot;: true</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这样生成的目录会是这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.1 Introduction</div><div class="line">1.2 Part I</div><div class="line">    1.2.1 Writing is nice</div><div class="line">    1.2.2 GitBook is nice</div><div class="line">1.3 Part II</div><div class="line">    1.3.1 We love feedback</div><div class="line">    1.3.2 Better tools for authors</div></pre></td></tr></table></figure>
<p>所有内容都会以 <code>1.x</code> 编码开始，这是一个 <a href="https://github.com/GitbookIO/gitbook/issues/1301" target="_blank" rel="external">Bug</a>，团队的人正在解决。当然，我们还是推荐使用使用 <code>Part</code> 分割章节（<code>3.x.x</code>版本后推荐的做法），我们修改 <code>SUMMARY.md</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># Summary</div><div class="line"></div><div class="line">* [Introduction](README.md)</div><div class="line"></div><div class="line"># Part I</div><div class="line">* [Part I](part1/README.md)</div><div class="line">    * [Writing is nice](part1/writing.md)</div><div class="line">    * [GitBook is nice](part1/gitbook.md)</div><div class="line"></div><div class="line"># Part II</div><div class="line">* [Part II](part2/README.md)</div><div class="line">    * [We love feedback](part2/feedback_please.md)</div><div class="line">    * [Better tools for authors](part2/better_tools.md)</div></pre></td></tr></table></figure>
<p>这样之后，显示的编码会变成这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.1 Introduction</div><div class="line">2.1 Part I</div><div class="line">    2.1.1 Writing is nice</div><div class="line">    2.1.2 GitBook is nice</div><div class="line">3.1 Part II</div><div class="line">    3.1.1 We love feedback</div><div class="line">    3.1.2 Better tools for authors</div></pre></td></tr></table></figure>
<p>不带编码显示是这样，会带上分割线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Introduction</div><div class="line">-----</div><div class="line">1.Part I</div><div class="line">    1.1 Writing is nice</div><div class="line">    1.2 GitBook is nice</div><div class="line">-----</div><div class="line">2.Part II</div><div class="line">    2.1 We love feedback</div><div class="line">    2.2 Better tools for authors</div></pre></td></tr></table></figure>
<p>针对真实项目，我整理一个目录结构，支持多级分类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># Summary</div><div class="line">* [Introduction](README.md)</div><div class="line"></div><div class="line"># 一级分类，不显示，会以横线分隔，相当于注释</div><div class="line">* [Introduction](part1/README.md)</div><div class="line">* [Part1 Section 1](part1/section-1.md)</div><div class="line">* [Part1 Section 2](part1/subsection-x/README.md)</div><div class="line">    * [Part1 Section 2-1](part1/subsection-x/subsection-x-1.md)</div><div class="line">    * [Part1 Section 2-2](part1/subsection-x/subsection-x-2.md)</div><div class="line"></div><div class="line"># 一级分类，不显示，会以横线分隔，相当于注释</div><div class="line">* [Introduction](part2/README.md)</div><div class="line">* [part2 Section 1](part2/section-1.md)</div><div class="line">* 未完成的时候</div><div class="line">    * [part2 Section 2-1](part2/subsection-x/subsection-x-1.md)</div><div class="line">    * [part2 Section 2-2](part2/subsection-x/subsection-x-2.md)</div><div class="line"></div><div class="line">## 二级分类，显示，不可点</div><div class="line"></div><div class="line">* An article in part 2</div><div class="line"></div><div class="line">### 三级分类，显示，不可点，和二级效果一致</div><div class="line">* An article in part 3</div><div class="line"></div><div class="line"></div><div class="line"># 一级分类，不显示，会以横线分隔</div><div class="line"></div><div class="line">* An article in an untitled part</div></pre></td></tr></table></figure>
<h2 id="PAGES"><a href="#PAGES" class="headerlink" title="PAGES"></a>PAGES</h2><p>每篇文章，就是一个单独的 <code>markdown</code> 文件，支持 <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">GitHub Flavored Markdown syntax</a>，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Title of the chapter</div><div class="line"></div><div class="line">This is a great introduction.</div><div class="line"></div><div class="line">## Section 1</div><div class="line"></div><div class="line">Markdown will dictates _most_ of your **book&apos;s structure**</div><div class="line"></div><div class="line">## Section 2</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>你可以选择在 <a href="https://www.gitbook.com/new" target="_blank" rel="external">GitBook New</a> 上创建，选择在线编辑或者通过 <code>git clone</code> 下载到本地编辑。</p>
<p>你还可以将在 Github 上创建的书籍，同步到 GitBook 中，在 GitBook 的项目设置中，手动添加对应的 Github 仓库，注意要保证 GitBook 对你的 Github 有访问权限。</p>
<p>原理是借助 Webhook，当你的 github 仓库有提交时，同步 GitBook 仓库。</p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>默认发布在 GitBook 上的项目，URL 规则是这样的: <code>https://www.gitbook.com/book/{username}/{bookname}</code>,如果我们要为此绑定域名，需要两处设置：</p>
<ul>
<li>GitBook 对于的项目设置中，修改 <code>Domain</code>，添加自定义域名</li>
<li>在你的域名服务商提供的控制面板中，设置 <code>CNAME</code>，绑定 <code>www.gitbooks.io</code>，开启 <code>domain forwarding</code></li>
</ul>
<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>重新使用 GitBook 是因为上周有人发邮件给我，说放在 GitBook 上的 <a href="https://www.gitbook.com/book/leohxj/a-programmer-prepares/details" target="_blank" rel="external">《程序员的自我修养》</a>这本书，下载为 PDF 格式时字体有些怪异，希望我能将书开源到 github 上供他自己编译，考虑到此书确实也很久没有更新了，我决定借此机会重启这一系列的更新，希望能将自己这一两年积累的知识贡献出来。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.gitbook.com/" target="_blank" rel="external">GitBook 官网</a></li>
<li><a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="external">GitbookIO/gitbook</a></li>
<li><a href="http://toolchain.gitbook.com/" target="_blank" rel="external">GitBook Document</a></li>
<li><a href="https://help.gitbook.com/" target="_blank" rel="external">Gitbook Help Center</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我之前使用 &lt;code&gt;gitbook&lt;/code&gt; 的时候还是 &lt;code&gt;1.x.x&lt;/code&gt; 版本，现在都已经 &lt;code&gt;3.x.x&lt;/code&gt; 了。
    
    </summary>
    
      <category term="gitbook相关" scheme="http://finalhome.org/categories/gitbook%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="gitbook" scheme="http://finalhome.org/tags/gitbook/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript的一些介绍</title>
    <link href="http://finalhome.org/JavaScript/ECMA%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BB%8B%E7%BB%8D/"/>
    <id>http://finalhome.org/JavaScript/ECMA的一些介绍/</id>
    <published>2016-09-06T02:00:00.000Z</published>
    <updated>2016-09-06T14:39:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习 JavaScript 的过程中，你肯定听说过 ECMAScript 。但是你知道它到底是什么吗?<br><a id="more"></a></p>
<h2 id="JavaScript-介绍"><a href="#JavaScript-介绍" class="headerlink" title="JavaScript 介绍"></a>JavaScript 介绍</h2><p>它是一种解释型的编程语言，由 <code>ECMA</code> 通过 <code>ECMAScript</code> （又称为 <code>ECMA-262</code>）实现语言的标准化。<code>JavaScript</code> 是被主流浏览器支持的。它的 <a href="http://www.w3school.com.cn/js/pro_js_implement.asp" target="_blank" rel="external">实现</a> 应该包含三个部分:</p>
<ul>
<li>ECMAScript: 语言核心，操作基本语法和对象，比如 <code>Array</code> 数组操作。</li>
<li>DOM: 文档对象模型，操作网页内容的方法和接口, 比如<code>document</code>, <code>event</code>, <code>document.getElementById</code> 等等。</li>
<li>BOM: 浏览器对象模型， 操作与浏览器进行交互的方法和接口，比如 <code>window</code> , <code>history</code>, <code>location</code> 等等。</li>
</ul>
<p>关于 <code>DOM</code> 和 <code>BOM</code> 的区别：</p>
<ul>
<li><code>DOM</code> 操作的是网页内的东西，<code>BOM</code> 操作的是浏览器相关内容。</li>
<li><code>DOM</code> 是 <code>W3C</code> 的标准， 而 <code>BOM</code> 是各个浏览器厂商根据 <code>DOM</code> 在各自浏览器上的实现。</li>
<li><code>document</code> 对象是 <code>DOM</code> 的规范实现，也是 <code>BOM</code> 的对象。</li>
</ul>
<p>还有一个常见的问题：<strong>ECMAScript和JavaScript到底是什么关系？</strong></p>
<p>要讲清楚这个问题，需要回顾历史。1996年11月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给国际标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布262号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是1.0版。</p>
<p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java是Sun公司的商标，根据授权协议，只有Netscape公司可以合法地使用 JavaScript 这个名字，且JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p>
<p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 扩展还有 Jscript 和 ActionScript）。JavaScript 存在的意义主要是为了解决在客户端对网页进行操作。</p>
<h2 id="ECMA-组织"><a href="#ECMA-组织" class="headerlink" title="ECMA 组织"></a>ECMA 组织</h2><p>以前是叫 <code>European Computer Manufacturers Association</code>, 1994 年改名为 <code>Ecma International</code>, 是一家国际性会员制度的信息和电信标准组织。官网为 <a href="http://www.ecma-international.org/" target="_blank" rel="external">ecma-international</a>。相关的标准都可以从中查询到，我们一般关注的就是 <a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm" target="_blank" rel="external">ECMA-262 标准</a>。</p>
<h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>ECMAScript 是由 ECMA-262 标准化的脚本语言的名称, JavaScript 是它的一种实现， 其他的实现还有 Falsh 中的 ActionScript。ECMA-262 标准（第 2 段）的描述如下：</p>
<blockquote>
<p>“ECMAScript 可以为不同种类的宿主环境提供核心的脚本编程能力，因此核心的脚本语言是与任何特定的宿主环境分开进行规定的… …”</p>
</blockquote>
<p>ECMAScript 仅仅是一个描述，定义了脚本语言的所有属性、方法和对象。其他语言可以实现 ECMAScript 来作为功能的基准，JavaScript 就是这样, ECMAScript 是它的核心。</p>
<h2 id="TC39"><a href="#TC39" class="headerlink" title="TC39"></a>TC39</h2><p>标准需要有人制定， TC39 就是一组开发 ECMA-262 标准规范的人。 它是 <code>Ecma第39号技术委员会</code> 的意思。</p>
<h2 id="ECMAScript-版本"><a href="#ECMAScript-版本" class="headerlink" title="ECMAScript 版本"></a>ECMAScript 版本</h2><p>我们常见的 <code>ES3</code>, <code>ES5</code>, <code>ES6</code> 就是 ECMAScript 的版本。它对应的也是 <code>ECMA-262</code> 的版本。它的历史大概如下:</p>
<ul>
<li>1996年11月，网景公司将 JavaScript 提交给 ECMA 进行标准化。</li>
<li>1997年6月，ECMAScript 1.0版发布。</li>
<li>1998年6月，ECMAScript 2.0版发布。</li>
<li>1999年12月，ECMAScript 3.0版发布，成为JavaScript的通行标准，得到了广泛支持。</li>
<li>2007年10月，ECMAScript 4.0版草案发布，对3.0版做了大幅升级，预计次年8月发布正式版本。草案发布后，由于4.0版的目标过于激进，各方对于是否通过这个标准，发生了严重分歧。以Yahoo、Microsoft、Google为首的大公司，反对JavaScript的大幅升级，主张小幅改动；以JavaScript创造者Brendan Eich为首的Mozilla公司，则坚持当前的草案。</li>
<li>2008年7月，由于对于下一个版本应该包括哪些功能，各方分歧太大，争论过于激进，ECMA开会决定，中止ECMAScript 4.0的开发，将其中涉及现有功能改善的一小部分，发布为ECMAScript 3.1，而将其他激进的设想扩大范围，放入以后的版本，由于会议的气氛，该版本的项目代号起名为Harmony（和谐）。会后不久，ECMAScript 3.1就改名为ECMAScript 5。</li>
<li>2009年12月，ECMAScript 5.0版正式发布。Harmony项目则一分为二，一些较为可行的设想定名为JavaScript.next继续开发，后来演变成ECMAScript 6；一些不是很成熟的设想，则被视为JavaScript.next.next，在更远的将来再考虑推出。</li>
<li>2011年6月，ECMAscript 5.1版发布，并且成为ISO国际标准（ISO/IEC 16262:2011）。</li>
<li>2013年3月，ECMAScript 6草案冻结，不再添加新功能。新的功能设想将被放到ECMAScript 7。</li>
<li>2013年12月，ECMAScript 6草案发布。然后是12个月的讨论期，听取各方反馈。</li>
<li>2015年6月17日，ECMAScript 6发布正式版本，即ECMAScript 2015。</li>
</ul>
<h2 id="浏览器对-ECMAScript-的支持"><a href="#浏览器对-ECMAScript-的支持" class="headerlink" title="浏览器对 ECMAScript 的支持"></a>浏览器对 ECMAScript 的支持</h2><p>浏览器是我们执行 JavaScript 的宿主环境之一，指定的标准需要宿主环境提供支持。目前所有浏览器都遵守 ECMA-262 第三版。需要注意的是 IE 浏览器， IE9及其以上版本才提供对 ES5 的支持。 所以在 IE6~8 下，如果我们需要使用 ES5 的一些方法，需要自行添加 <code>polyfill</code> 。同样的，目前大部分主流浏览器 (Chrome, Safari, firefox)，是支持到 ES5 的，如果我们需要使用 ES6 标准，需要借助语法转换工具，比如 <a href="https://babeljs.io/" target="_blank" rel="external">Babel</a>, 对我们的代码进行转码，变成 ES5 支持的代码，然后在浏览器中运行。</p>
<p>关于 ECMAScript 浏览器兼容性，可以查询： <a href="http://kangax.github.io/compat-table/es5/" target="_blank" rel="external">ECMAScript compat-table</a>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.w3school.com.cn/js/pro_js_implement.asp" target="_blank" rel="external">JavaScript 实现</a></li>
<li><a href="https://vkanakaraj.wordpress.com/2009/12/18/javascript-vs-dom-vs-bom-relationship-explained/" target="_blank" rel="external">JavaScript Vs DOM Vs BOM, relationship explained</a></li>
<li><a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm" target="_blank" rel="external">ECMA-262 标准</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/11/ecmascript-specification.html" target="_blank" rel="external">读懂 ECMAScript 规格</a></li>
<li><a href="http://www.07net01.com/2015/08/913846.html" target="_blank" rel="external">ECMAScript各版本简介及特性</a></li>
<li><a href="http://www.w3cplus.com/js/ecmascript-lesson-1.html" target="_blank" rel="external">《献给你，我深爱的ECMAScript》开篇</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习 JavaScript 的过程中，你肯定听说过 ECMAScript 。但是你知道它到底是什么吗?&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://finalhome.org/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://finalhome.org/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用ES6编写gulp和webpack配置文件</title>
    <link href="http://finalhome.org/JavaScript/%E4%BD%BF%E7%94%A8es6%E7%BC%96%E5%86%99gulp%E5%92%8Cwebpack%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://finalhome.org/JavaScript/使用es6编写gulp和webpack配置文件/</id>
    <published>2016-08-30T07:40:10.000Z</published>
    <updated>2016-09-06T14:39:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>ES6 已经可以逐步应用到我们的工程之中了，针对构建工具，我们也可以使用 ES6 来编辑配置文件。比如 <code>gulpfile</code> 和 <code>webpack.config</code> 文件。<br><a id="more"></a></p>
<h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h2><p><code>gulp</code> 版本在 3.9 以上的，支持我们使用 ES6 语法编写 <code>gulpfile</code> 文件。</p>
<p>通过 <code>gulp -v</code> 查看项目的 <code>gulp</code> 版本，如果低于 3.9, 需要更新。</p>
<p>安装 <code>babel</code> 相关库，<code>npm install babel-core babel-preset-es2015 --save-dev</code>。</p>
<p>创建 <code>.babelrc</code>, 配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [&quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们创建 <code>gulpfile.babel.js</code> 替代 <code>gulpfile.js</code>，然后我们就可以在此文件中使用 ES6 语法构建响应的 task 了。比如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import gulp from &apos;gulp&apos;;</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;, () =&gt; console.log(&apos;Default task called&apos;));</div></pre></td></tr></table></figure>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>类似 <code>gulp</code>, <code>webpack</code> 也支持使用 ES6 语法去构建配置文件。这是 <code>webpack</code> 的一个特性，但是没有列在文档中，在项目的 issue 中，有人回复提及过这个特性。</p>
<p>当我们创建 <code>webpack.config.[LOADER].js</code> 时候， webpack 会用相应的 loader 去转换一遍配置文件。使用 <code>babel</code> 时，我们需要安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D webpack babel-loader babel-core babel-preset-es2015</div></pre></td></tr></table></figure>
<p>并且创建 <code>.babelrc</code> 文件，写入相关配置。</p>
<p>最后，我们创建 <code>webpack.config.babel.js</code> 文件，就可以在其中以 ES6 语法去书写了, 比如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import webpack from &apos;webpack&apos;;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">    entry: &apos;./src/app.js&apos;,</div><div class="line">    output: &#123;</div><div class="line">        path: &apos;./bin&apos;,</div><div class="line">        filename: &apos;app.bundle.js&apos;,</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6 已经可以逐步应用到我们的工程之中了，针对构建工具，我们也可以使用 ES6 来编辑配置文件。比如 &lt;code&gt;gulpfile&lt;/code&gt; 和 &lt;code&gt;webpack.config&lt;/code&gt; 文件。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://finalhome.org/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://finalhome.org/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://finalhome.org/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>实战运用 Babel</title>
    <link href="http://finalhome.org/JavaScript/%E5%AE%9E%E6%88%98%E8%BF%90%E7%94%A8Babel/"/>
    <id>http://finalhome.org/JavaScript/实战运用Babel/</id>
    <published>2016-08-30T02:00:00.000Z</published>
    <updated>2016-09-06T14:39:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>babel 是一个转码工具，可以将使用 ES6 语法编写的代码，转换为 ES5 代码，从而在现有的环境中运行。<br><a id="more"></a></p>
<p>我们运行的场景大概有分为 demo性质的小练习 与 实际的工程项目。</p>
<h2 id="babelrc-文件"><a href="#babelrc-文件" class="headerlink" title=".babelrc 文件"></a><code>.babelrc</code> 文件</h2><p>使用 Babel 的时候，基本上我们都要配置 <code>.babelrc</code> 文件，用来指定使用的 <code>preset</code> 和 <code>plugin</code>。比如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;preset&quot;: [&quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Read-Eval-Print-Loop-REPL"><a href="#Read-Eval-Print-Loop-REPL" class="headerlink" title="Read-Eval-Print-Loop (REPL)"></a>Read-Eval-Print-Loop (REPL)</h2><p>如果你想立即尝试一下ES6，那么Babel这个在线的交互式运行环境最合适: <a href="http://babeljs.io/repl/" target="_blank" rel="external">Babel REPL</a>。</p>
<p>比如你输入:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure></p>
<p>就会立刻转码为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="keyword">var</span> _a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure></p>
<p>并且在右下方有输出模式。</p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>在线运行可以使得我们尝试一下ES6的语法，但是当我们想要在本地运行的时候，就需要借助Babel-cli或babel-node（包含在babel-cli中）了。全局安装，<code>npm install -g babel-cli</code>。如果只是想针对某个项目安装的话，使用:<code>npm install --save-dev babel-cli</code>或者在<code>package.json</code>中，添加:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"my-project"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.0.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>尽管你可以把 Babel CLI 全局安装在你的机器上，但是按项目逐个安装在本地会更好。</strong>有两个主要的原因:</p>
<ul>
<li>在同一台机器上的不同项目或许会依赖不同版本的 Babel 并允许你有选择的更新。</li>
<li>这意味着你对工作环境没有隐式依赖，这让你的项目有很好的可移植性并且易于安装。</li>
</ul>
<p>安装在本地的话，运行需要指定<code>node_modules</code>下面的模块，即<code>node_modules\.bin\babel --help</code>方式。但还有一个快捷方式，配置<code>npm run</code>,在<code>package.json</code>中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">  &quot;build&quot;: &quot;babel src -d lib&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h2><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。</p>
<p>这种方法并不适合正式产品环境使用。 直接部署用此方式编译的代码不是好的做法。 在部署之前预先编译会更好。 不过用在构建脚本或是其他本地运行的脚本中是非常合适的。</p>
<p>babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p>
<h2 id="工程中使用"><a href="#工程中使用" class="headerlink" title="工程中使用"></a>工程中使用</h2><p>在工程项目中，我们使用的基本是基于 <code>gulp</code> 或 <code>webpack</code> 的构建的。添加对应的模块，我们就可以在工程中使用 ES6 语法去书写代码了。</p>
<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><p>需要安装: <code>npm i -D gulp-babel</code> 模块。</p>
<p>配置 <code>gulpfile.js</code> 文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&quot;gulp&quot;);</div><div class="line">var babel = require(&quot;gulp-babel&quot;);</div><div class="line"></div><div class="line">gulp.task(&quot;default&quot;, function () &#123;</div><div class="line">  return gulp.src(&quot;src/app.js&quot;)</div><div class="line">    .pipe(babel())</div><div class="line">    .pipe(gulp.dest(&quot;dist&quot;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><p>需要安装: <code>npm i -D babel-loader babel-core</code> 模块。</p>
<p>配置 <code>webpack.config.js</code> 文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    entry: &apos;./src/app.js&apos;,</div><div class="line">    output: &#123;</div><div class="line">        path: &apos;./bin&apos;,</div><div class="line">        filename: &apos;app.bundle.js&apos;,</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: [&#123;</div><div class="line">            test: /\.jsx?$/,</div><div class="line">            exclude: /node_modules/,</div><div class="line">            loader: &apos;babel-loader&apos;,</div><div class="line">        &#125;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul>
<li>通常项目中，我们还需要添加 <code>babel-preset-es2015</code>, 并且设置 <code>.babelrc</code> 文件。</li>
<li>实际项目运行的时候，为了保证浏览器兼容性，我们也会引入 <code>babel-polyfill</code>。</li>
<li>添加 <code>sourcemap</code> 文件，通常还需要引入其他模块，比如 <code>gulp-sourcemaps</code>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;babel 是一个转码工具，可以将使用 ES6 语法编写的代码，转换为 ES5 代码，从而在现有的环境中运行。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://finalhome.org/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://finalhome.org/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://finalhome.org/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>hexo速食指南</title>
    <link href="http://finalhome.org/hexo%E7%9B%B8%E5%85%B3/hexo%E9%80%9F%E9%A3%9F%E6%8C%87%E5%8D%97/"/>
    <id>http://finalhome.org/hexo相关/hexo速食指南/</id>
    <published>2016-08-29T08:00:07.000Z</published>
    <updated>2016-09-06T14:39:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于 Hexo 3.x版本, 配合 github，带领大家快速构建自己的 blog。<a id="more"></a></p>
<p>之前搭建自己 blog 的时候，整理过几篇文章，一年多过去了，Hexo 也已经升级到了 3.x 版本，和之前的版本使用上稍有差别。这次更新 hexo，顺便再次记录一下博客的构建。</p>
<h2 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo"></a>什么是 Hexo</h2><blockquote>
<p>Hexo: A fast, simple &amp; powerful blog framework.</p>
</blockquote>
<p>官方的一句话介绍：“快速，简单，强大的博客框架”。</p>
<p>实质完成的工作是：让我们以<code>markdown</code>形式书写博客内容，通过 Hexo 帮助我们生成静态文件，配合 github， 或者其他静态资源服务器进行部署。</p>
<h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>使用 Hexo 有两个必要工具需要确保安装：</p>
<ul>
<li>git</li>
<li>node</li>
</ul>
<p>使用 <code>npm i -g hexo-cli</code> 安装 <code>hexo</code> 命令行工具。</p>
<h2 id="创建-blog-目录"><a href="#创建-blog-目录" class="headerlink" title="创建 blog 目录"></a>创建 blog 目录</h2><p><code>hexo init &lt;folder&gt;</code> 创建我们的 blog 目录。</p>
<p>此命令会帮助我们生成目录，并进入执行 <code>npm install</code>，如遇失败，我们需要手动进入生成的目录，并再次执行 <code>npm install</code>。</p>
<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p><code>hexo new [layout] &lt;title&gt;</code> 命令可以帮助我们创建文章模版。</p>
<p>layout支持三种类型，对应生成文件在不同的目录下:</p>
<ul>
<li><code>post</code>: <code>source/_posts</code></li>
<li><code>page</code>: <code>source</code></li>
<li><code>draft</code>: <code>source/_drafts</code></li>
</ul>
<p>如果不传递 <code>layout</code>， 默认生成的就是 <code>post</code> 类型。文件在 <code>source/_posts</code> 目录下， 文件的内容结构大致如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<p>这一段相当于是文件信息， 是给 Hexo 使用，帮助我们生成目录，标签等内容的。 它下面开始的就是我们实际的文件内容，使用 <code>markdown</code> 语法编写。</p>
<h2 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h2><p><code>hexo server</code> 命令帮助我们在本地实现预览。</p>
<p>默认开启的是 4000 端口， 通过 <code>localhost:4000</code> 即可访问。</p>
<h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p><code>hexo generate</code> 命令帮助我们生成静态资源文件。</p>
<p>生成的文件在 <code>public</code> 目录下，我们只要将这个目录内容发布到 github 或 静态资源服务器上，即可通过域名访问了。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>这里讲解配合 github 部署的方案， Hexo 3.x 版本后， 部署git需要安装一个插件: <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a>, 然后设置我们的 <code>_config.yml</code> 配置文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div><div class="line">  branch: [branch]</div></pre></td></tr></table></figure>
<p>填上我们项目的url, branch 信息，即可通过 <code>hexo deploy</code> 实现发布到对应 github 仓库中了。</p>
<p><strong>注意</strong>： github 默认提供一个 <code>username.github.io</code> 仓库， 用来给我们存放个人相关站点， 通过域名 <code>username.github.io</code> 即可访问。原来需要设置<code>gh-page</code>分支，现在也可以直接指定静态资源访问的分支了。如有不明白的地方，自行 google 一下吧， 只要达到将静态文件存放到这个仓库中，就能实现访问了。</p>
<h2 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h2><p>基本的 blog 系统算是完成了，我们对界面或许还有些追求， Hexo 也提供了许多主题供我们选择，在 <a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo Themes</a> 可以查看。</p>
<p>选择了一个主题之后，我们可以将它 <code>clone</code> 或 <code>download</code> 到本地，放置在 <code>theme</code> 目录下， 然后修改 <code>_config.yml</code> 文件，配置主题名称, 比如我的这个主题 <code>Hacker</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: Hacker</div></pre></td></tr></table></figure>
<p>主题相关的设置，比如是否有评论组件，google统计等设置，均在主题目录下的 <code>_config.yml</code> 中进行配置，具体的配置要查看主题文档。</p>
<h2 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h2><p>通常我们还会为博客生成 <code>sitemap</code> 和 <code>RSS</code> 订阅需要的文件，活着添加本地保存刷新功能。这些是需要插件完成的，下载对应的插件，然后在 <code>_config.yml</code> 中进行对应配置即可。这里推荐几个插件:</p>
<ul>
<li>hexo-generator-sitemap: 生成网站的sitemap文件</li>
<li>hexo-generator-feed: Generate Atom 1.0 or RSS 2.0 feed.</li>
<li>hexo-generator-archive: Archive generator plugin for Hexo.</li>
<li>hexo-deployer-git: Git deployer plugin for Hexo.</li>
<li>hexo-browsersync: 自动刷新功能</li>
</ul>
<h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>进过了以上的一些设置，我想各位应该可以搭建一个类似本站的博客了。最后一步可能就是需要设置一个自己的域名了。通过需要两步：</p>
<ul>
<li>在域名系统中添加 A纪录 和 <code>CNAME</code>： 通过自己的域名，能够访问 <code>username.github.io</code></li>
<li>在<code>source</code>目录下添加 <code>CNAME</code>： 通过<code>username.github.io</code>，能够跳转到自己的域名</li>
</ul>
<p><code>CNAME</code>文件内容，就是自己的域名地址。</p>
<h2 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h2><p>主要是对图片和项目工程的管理。</p>
<p>图片，Hexo 建议我们将工程用到的图片直接放置在 <code>source/images</code> 目录中，如果是文章依赖的图片，通过修改 <code>_config.yml</code> 中的 <code>post_asset_folder: true</code>, 再次创建新文章的时候，就会创建一个和文章同名的目录，用来存放我们的素材。</p>
<p>工程上面，我们放置到 github 上的，是生成的静态资源。我们项目实际的工程是放置在本地的，所以不利于同步和管理。我目前使用的是在 <code>username.github.io</code> 上创建一个 <code>source</code> 分支，用来存放管理源文件。这样，我在一台新的电脑上，只需要 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout source</div><div class="line">npm install</div><div class="line">hexo deploy -g</div></pre></td></tr></table></figure>
<p>就可以在新的机器上完成写作与部署了。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>最后说一点，博客记录的是自己的产出，多花点时间专注在内容上 :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于 Hexo 3.x版本, 配合 github，带领大家快速构建自己的 blog。
    
    </summary>
    
      <category term="hexo相关" scheme="http://finalhome.org/categories/hexo%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="hexo" scheme="http://finalhome.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>I&#39;m back, again!</title>
    <link href="http://finalhome.org/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/%E6%88%91%E5%8F%88%E5%9B%9E%E6%9D%A5%E4%BA%86/"/>
    <id>http://finalhome.org/生活杂记/我又回来了/</id>
    <published>2016-08-28T12:00:00.000Z</published>
    <updated>2016-08-29T15:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>我又回来了！<a id="more"></a></p>
<p>距离我上次更新 blog, 大约一年半的时间了。这一年多，我没有关闭 blog，也算是种坚持吧 :)</p>
<p>虽然这一年多没有坚持写 blog, 但我还是做了点其他的事情，比如：</p>
<ul>
<li>我创建了两本 gitbook, 反响还不错</li>
<li>在开发者头条上创建了一个主题： &lt;前端成长手册&gt;， 订阅人数快到4k了</li>
<li>自己基于 Trello 构建了相关的知识wiki系统</li>
<li>换了工作, 到了一个还可以的平台</li>
<li>结了婚，有了终身的伴侣</li>
<li>…</li>
</ul>
<p>虽然有时候我不说话，但是不代表我存在。既然囤积了一些力量，那么在自己的平台上发挥发挥吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我又回来了！
    
    </summary>
    
      <category term="生活杂记" scheme="http://finalhome.org/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://finalhome.org/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>GoogleStaticMap的使用</title>
    <link href="http://finalhome.org/Google%E7%9B%B8%E5%85%B3/GoogleStaticMap%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://finalhome.org/Google相关/GoogleStaticMap的使用/</id>
    <published>2014-11-21T05:36:46.000Z</published>
    <updated>2016-08-29T13:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>做前端不可避免的会接触到地图服务，Google Map是面试应用中的佼佼者。它提供的功能很全面，也方便定制。<a id="more"></a></p>
<h2 id="Google-Maps-Image-APIs"><a href="#Google-Maps-Image-APIs" class="headerlink" title="Google Maps Image APIs"></a>Google Maps Image APIs</h2><p><a href="https://developers.google.com/maps/documentation/imageapis/" target="_blank" rel="external">Google Maps Image APIs</a>, 顾名思义，就是提供静态图片的服务。可以传递坐标，尺寸等信息。</p>
<p>提供了两种API：</p>
<ul>
<li><a href="https://developers.google.com/maps/documentation/staticmaps/" target="_blank" rel="external">Static Maps</a></li>
<li><a href="https://developers.google.com/maps/documentation/streetview/" target="_blank" rel="external">Street View</a></li>
</ul>
<h2 id="一个需求"><a href="#一个需求" class="headerlink" title="一个需求"></a>一个需求</h2><p>昨日帮同事做个小功能，给定三个地点的经纬度以及尺寸，输出三个地点在所输出的图片上的坐标。所用的是<code>Static Map</code>API。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>根据给出的点获取合适的zoom级别的图片，这个方法google直接就可以用，只需要把zoom设置为auto即可。比如:<br><img src="https://maps.googleapis.com/maps/api/staticmap?center=40.744907,-73.997144&amp;zoom=auto&amp;size=350x265&amp;maptype=roadmap&amp;markers=color:blue%7Clabel:S%7C40.764083,-73.995767&amp;markers=color:green%7Clabel:G%7C40.753933,-73.900254&amp;markers=color:red%7Clabel:C%7C40.716705,-74.095413" alt="zoom auto"></p>
<p>但解决这个需求，有几个关键的点：</p>
<ul>
<li>求出正确的zoom级别</li>
<li>求出在256x256下的坐标</li>
<li>更具zoom求出对应尺寸下的坐标</li>
</ul>
<p>在线预览如下：<a href="http://jsfiddle.net/leohxj/Lga46rx1/" target="_blank" rel="external">jsfiddle</a></p>
<h3 id="求出zoom-levels"><a href="#求出zoom-levels" class="headerlink" title="求出zoom levels"></a>求出zoom levels</h3><p>由于我暂时还没理解，只能直接贴出代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">// getZoom.js</div><div class="line">function getBoundsZoomLevel(points, mapDim) &#123;</div><div class="line">    var WORLD_DIM = &#123; height: 256, width: 256 &#125;;</div><div class="line">    var ZOOM_MAX = 21;</div><div class="line"></div><div class="line">    function latRad(lat) &#123;</div><div class="line">        var sin = Math.sin(lat * Math.PI / 180);</div><div class="line">        var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;</div><div class="line">        return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function zoom(mapPx, worldPx, fraction) &#123;</div><div class="line">        return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var ne = getNorthEast(points);</div><div class="line">    var sw = getSouthWest(points);</div><div class="line"></div><div class="line">    var latFraction = (latRad(ne.lat) - latRad(sw.lat)) / Math.PI;</div><div class="line">    </div><div class="line">    var lngDiff = ne.lng - sw.lng;</div><div class="line">    var lngFraction = ((lngDiff &lt; 0) ? (lngDiff + 360) : lngDiff) / 360;</div><div class="line">    </div><div class="line">    var latZoom = zoom(mapDim.height, WORLD_DIM.height, latFraction);</div><div class="line">    var lngZoom = zoom(mapDim.width, WORLD_DIM.width, lngFraction);</div><div class="line">    </div><div class="line">    return Math.min(latZoom, lngZoom, ZOOM_MAX)-1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function getBoundsCenter(points) &#123;</div><div class="line">    var centerX = 0;</div><div class="line">    var centerY = 0;</div><div class="line">    for (var i = 0, len = points.length; i &lt; len; i++) &#123;</div><div class="line">        centerX += points[i].lat;</div><div class="line">        centerY += points[i].lng;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return &#123;</div><div class="line">        lat: (centerX/3),</div><div class="line">        lng: (centerY/3)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function getNorthEast(points) &#123;</div><div class="line">    var neLat = points[0].lat;</div><div class="line">    var neLng = points[0].lng;</div><div class="line"></div><div class="line">    for (var i = 1, len = points.length; i &lt; len; i++) &#123;</div><div class="line">        neLat = Math.max(neLat, points[i].lat);</div><div class="line">        neLng = Math.max(neLng, points[i].lng);</div><div class="line">    &#125;</div><div class="line">    return &#123;</div><div class="line">        lat: neLat,</div><div class="line">        lng: neLng</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">function getSouthWest(points) &#123;</div><div class="line">    var swLat = points[0].lat;</div><div class="line">    var swLng = points[0].lng;</div><div class="line"></div><div class="line">    for (var i = 1, len = points.length; i &lt; len; i++) &#123;</div><div class="line">        swLat = Math.min(swLat, points[i].lat);</div><div class="line">        swLng = Math.min(swLng, points[i].lng);</div><div class="line">    &#125;</div><div class="line">    return &#123;</div><div class="line">        lat: swLat,</div><div class="line">        lng: swLng</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function formatPoint2Str(point) &#123;</div><div class="line">    return point.lat + &quot;,&quot; + point.lng;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="求出256x256下坐标"><a href="#求出256x256下坐标" class="headerlink" title="求出256x256下坐标"></a>求出256x256下坐标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">// MercatorProjection.js</div><div class="line">var MERCATOR_RANGE = 256;</div><div class="line"></div><div class="line">function bound(value, opt_min, opt_max) &#123;</div><div class="line">  if (opt_min != null) value = Math.max(value, opt_min);</div><div class="line">  if (opt_max != null) value = Math.min(value, opt_max);</div><div class="line">  return value;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function degreesToRadians(deg) &#123;</div><div class="line">  return deg * (Math.PI / 180);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function radiansToDegrees(rad) &#123;</div><div class="line">  return rad / (Math.PI / 180);</div><div class="line">&#125;</div><div class="line"></div><div class="line">function MercatorProjection() &#123;</div><div class="line">  this.pixelOrigin_ = &#123;x:MERCATOR_RANGE/2, y:MERCATOR_RANGE/2&#125;;</div><div class="line">  this.pixelsPerLonDegree_ = MERCATOR_RANGE / 360;</div><div class="line">  this.pixelsPerLonRadian_ = MERCATOR_RANGE / (2 * Math.PI);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">MercatorProjection.prototype.fromLatLngToPoint = function(latLng, opt_point) &#123;</div><div class="line">  var me = this;</div><div class="line"></div><div class="line">  var point = opt_point || &#123;x:0, y:0&#125;;</div><div class="line"></div><div class="line">  var origin = me.pixelOrigin_;</div><div class="line">  point.x = origin.x + latLng.lng * me.pixelsPerLonDegree_;</div><div class="line">  // NOTE(appleton): Truncating to 0.9999 effectively limits latitude to</div><div class="line">  // 89.189.  This is about a third of a tile past the edge of the world tile.</div><div class="line">  var siny = bound(Math.sin(degreesToRadians(latLng.lat)), -0.9999, 0.9999);</div><div class="line">  point.y = origin.y + 0.5 * Math.log((1 + siny) / (1 - siny)) * -me.pixelsPerLonRadian_;</div><div class="line">  return point;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">MercatorProjection.prototype.fromPointToLatLng = function(point) &#123;</div><div class="line">  var me = this;</div><div class="line"></div><div class="line">  var origin = me.pixelOrigin_;</div><div class="line">  var lng = (point.x - origin.x) / me.pixelsPerLonDegree_;</div><div class="line">  var latRadians = (point.y - origin.y) / -me.pixelsPerLonRadian_;</div><div class="line">  var lat = radiansToDegrees(2 * Math.atan(Math.exp(latRadians)) - Math.PI / 2);</div><div class="line">  return new google.maps.LatLng(lat, lng);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//pixelCoordinate = worldCoordinate * Math.pow(2,zoomLevel)</div></pre></td></tr></table></figure>
<h3 id="求出对应指定尺寸下的坐标"><a href="#求出对应指定尺寸下的坐标" class="headerlink" title="求出对应指定尺寸下的坐标"></a>求出对应指定尺寸下的坐标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function getCorners(center,point,zoom,mapWidth,mapHeight)&#123;</div><div class="line">    var scale = Math.pow(2,zoom);</div><div class="line">    var centerPx = proj.fromLatLngToPoint(center);</div><div class="line">    var point = proj.fromLatLngToPoint(point);</div><div class="line"></div><div class="line">    var result = &#123;x:(point.x-centerPx.x)*scale+mapWidth/2,y:(-centerPx.y+point.y)*scale+mapHeight/2&#125;</div><div class="line"></div><div class="line">    return result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://jsfiddle.net/john_s/BHHs8/6/" target="_blank" rel="external">jsfiddle: calc zoom</a></li>
<li><a href="http://stackoverflow.com/questions/6048975/google-maps-v3-how-to-calculate-the-zoom-level-for-a-given-bounds" target="_blank" rel="external">Google Maps V3 - How to calculate the zoom level for a given bounds</a></li>
<li><a href="http://stackoverflow.com/questions/12507274/how-to-get-bounds-of-a-google-static-map" target="_blank" rel="external">How to get bounds of a google static map?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做前端不可避免的会接触到地图服务，Google Map是面试应用中的佼佼者。它提供的功能很全面，也方便定制。
    
    </summary>
    
      <category term="google相关" scheme="http://finalhome.org/categories/google%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="google" scheme="http://finalhome.org/tags/google/"/>
    
      <category term="Map" scheme="http://finalhome.org/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>关于地图服务的地理知识</title>
    <link href="http://finalhome.org/Google%E7%9B%B8%E5%85%B3/%E5%85%B3%E4%BA%8E%E5%9C%B0%E5%9B%BE%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%9C%B0%E7%90%86%E7%9F%A5%E8%AF%86/"/>
    <id>http://finalhome.org/Google相关/关于地图服务的地理知识/</id>
    <published>2014-11-21T04:36:46.000Z</published>
    <updated>2016-08-29T13:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>地理一直是本人的硬伤，我到现在也不能立即说出经纬度的范围。<a id="more"></a></p>
<h2 id="基本地理知识"><a href="#基本地理知识" class="headerlink" title="基本地理知识"></a>基本地理知识</h2><ul>
<li>经纬度：经纬度是经度与纬度的合称组成一个坐标系统。又称为地理坐标系统，它是一种利用三度空间的球面来定义地球上的空间的球面坐标系统，能够标示地球上的任何一个位置。</li>
<li>经度： 经度是地球上一个地点离一根被称为本初子午线的南北方向走线以东或以西的度数。本初子午线的经度是0°，地球上其它地点的经度是向东到180°或向西到180°。不像纬度有赤道作为自然的起点，经度没有自然的起点而使用经过伦敦格林尼治天文台旧址的子午线作为起点。东经180°即西经180°，约等同于国际日期变更线，国际日期变更线的两边，日期相差一日。</li>
<li>纬度: 纬度是指某点与地球球心的连线和地球赤道面所成的线面角，其数值在0至90度之间。位于赤道以北的点的纬度叫北纬，记为N，位于赤道以南的点的纬度称南纬，记为S。</li>
</ul>
<h2 id="地图映射关系"><a href="#地图映射关系" class="headerlink" title="地图映射关系"></a>地图映射关系</h2><p>地球是一个球体，通过经纬度可以在这个球体上定位任何一个位置。经纬度以度数表示，一般可直接以小数点表示，但亦可把度数的小数点分为角分（1角分等于六十分之一度），和秒（一秒等于六十分之一分）。</p>
<p>我们常见的地图服务，是通过一种叫做<a href="http://en.wikipedia.org/wiki/UV_mapping" target="_blank" rel="external">UV mapping</a>的方式，把球面的点与经纬度对应起来。参考的映射地图，是一个叫做<a href="https://en.wikipedia.org/wiki/Mercator_projection" target="_blank" rel="external">Mercator projection</a>的项目。</p>
<p>我们看到的平面地图，理论上是一张如下所示的地图，中心点就是经纬度为0的点：<br><img src="https://maps.googleapis.com/maps/api/staticmap?center=0,0&amp;zoom=0&amp;size=256x256&amp;maptype=roadmap&amp;markers=color:blue%7Clabel:S%7C0,0" alt="Map"></p>
<p>Google关于这个坐标系的定义是这样的：<a href="https://developers.google.com/maps/documentation/javascript/maptypes#MapCoordinates" target="_blank" rel="external">MapCoordinates</a>。每次缩放的级别都是二的幂。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developers.google.com/maps/documentation/staticmaps/#Zoomlevels" target="_blank" rel="external">Zoom Levels</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;地理一直是本人的硬伤，我到现在也不能立即说出经纬度的范围。
    
    </summary>
    
      <category term="google相关" scheme="http://finalhome.org/categories/google%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="google" scheme="http://finalhome.org/tags/google/"/>
    
      <category term="Map" scheme="http://finalhome.org/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>GooglePlay登录美国区的方式</title>
    <link href="http://finalhome.org/Google%E7%9B%B8%E5%85%B3/GooglePlay%E7%99%BB%E5%BD%95%E7%BE%8E%E5%9B%BD%E5%8C%BA%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://finalhome.org/Google相关/GooglePlay登录美国区的方式/</id>
    <published>2014-11-19T05:26:47.000Z</published>
    <updated>2016-08-29T13:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>双十一的时候购入了锤子手机，整体感觉很优雅。由于是Android系统，所以第一件事情我还是安装Google的相关服务。然后下载一个Google Play市场，下一些正品的应用。<a id="more"></a></p>
<h2 id="Google服务框架"><a href="#Google服务框架" class="headerlink" title="Google服务框架"></a>Google服务框架</h2><p>自从使用智能机器以来，我一直都是用的Android，小米、魅族、锤子，这三个优秀的Android系统我都体验过了。总体来说，还是很喜欢锤子的系统，喜欢这件事情，是一个很主观的事情，必须要自己去体验一下。</p>
<p>Android系统，不用Google服务，总感觉缺失了一些安全感。作为一个程序员，有着良好的科学上网方式，我是必须装上Google服务的。锤子这一点我觉得做的就比其他系统好很多，它的内置应用商店中就有一个<code>Google服务下载器</code>,并且当你要下载使用Google服务相关的应用时候，它的软件描述中还会告知用户请先下载Google服务，很贴心。</p>
<p>下载并安装完成之后，可能要先翻墙一下，然后登陆Google账号。然后选择你要同步的内容即可。我不推荐同步联系人和人脉，google的联系人中还包含了你发送邮件的地址，显得很混乱。不如使用<code>QQ同步助手</code>这样专门用于联系人同步的软件。一般我只用来同步日历。</p>
<h2 id="设置翻墙"><a href="#设置翻墙" class="headerlink" title="设置翻墙"></a>设置翻墙</h2><p>选择一个翻墙方式，VPN或者shadowsocks。一定要记住<strong>必须是美国的ip</strong>,可以在百度中搜索IP查看验证。</p>
<h3 id="电脑端设置"><a href="#电脑端设置" class="headerlink" title="电脑端设置"></a>电脑端设置</h3><p>首先清空或者选择Chrome的隐私模式。首先登陆<a href="wallet.google.com">Google Wallet</a>, 不是Google Play。</p>
<p>设置下付款地址, 由于我之前绑定了信用卡，在左侧的导航栏里，选择<code>Payment Method</code>，保险起见，建议右侧的Setting里面的Home Address也一并修改了。修改地址为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Leo Hui</div><div class="line">1 World Way</div><div class="line">Los Angeles World Airports</div><div class="line">Los Angeles CA 90045 US</div></pre></td></tr></table></figure>
<p>修改完成之后，登陆<a href="play.google.com">Google Play</a>, 理论上看到的就是美区的内容了，特点是左侧导航里会有图书，音乐等选项。</p>
<p>选择一本免费得图书，点击购买，选择使用兑换码购买，输入一个使用过的代码，比如<code>2M7J2LPCU7K62QK6U54G</code>即可。点击下一步，会告知此兑换码已经使用过，这就达到我们的目的了。就是为了记录一次购买经历。然后就可以关闭当前付款窗口。重新打开购买，就可以免费购买图书了。</p>
<p>这一步，其实已经完成了账号绑定到美国区的过程。</p>
<h3 id="手机端设置"><a href="#手机端设置" class="headerlink" title="手机端设置"></a>手机端设置</h3><p>同样的先选择一个能翻墙到美国区的方式。</p>
<p>建议先从软件设置中清空Google Play的数据。等于重新打开。切换区域可能存在一定的延时，所以可以多试几次（清空数据再登录）。</p>
<p>如果一切正常，那么你看到的也应该是美国区的Google Play。里面的应用可以说是应用尽有。</p>
<p>Enjoy it!</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://micromacer.lofter.com/post/1c7abf_89e712" target="_blank" rel="external">喜大普奔!Google Play永久锁定美国区教程!-断尾的Zekrom</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;双十一的时候购入了锤子手机，整体感觉很优雅。由于是Android系统，所以第一件事情我还是安装Google的相关服务。然后下载一个Google Play市场，下一些正品的应用。
    
    </summary>
    
      <category term="google相关" scheme="http://finalhome.org/categories/google%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="google" scheme="http://finalhome.org/tags/google/"/>
    
      <category term="Play" scheme="http://finalhome.org/tags/Play/"/>
    
  </entry>
  
  <entry>
    <title>ios界面尺寸</title>
    <link href="http://finalhome.org/UI/ios-size/"/>
    <id>http://finalhome.org/UI/ios-size/</id>
    <published>2014-10-13T05:55:14.000Z</published>
    <updated>2016-08-29T13:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍下ios中safari的尺寸。ios界面主要被分割为如下几部分:</p>
<ul>
<li>Status bar</li>
<li>Navigation bar</li>
<li>Content</li>
<li>Tab bar</li>
</ul>
<p>如图：<br><img src="http://www.idev101.com/code/User_Interface/img/bothPhones.jpg" alt="Sizes of iPhone UI Elements"><br><a id="more"></a></p>
<h2 id="设备尺寸"><a href="#设备尺寸" class="headerlink" title="设备尺寸"></a>设备尺寸</h2><p>Resolutions &amp; Display Specifications:</p>
<table>
<thead>
<tr>
<th>Devices</th>
<th style="text-align:center">point</th>
<th style="text-align:right">pixel</th>
<th style="text-align:right">Physical Device</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPhone 2g/3g/3gs</td>
<td style="text-align:center">320x480</td>
<td style="text-align:right">320x640</td>
<td style="text-align:right">3.5’’</td>
</tr>
<tr>
<td>iPhone 4/4s</td>
<td style="text-align:center">320x480</td>
<td style="text-align:right">640x960</td>
<td style="text-align:right">3.5’’</td>
</tr>
<tr>
<td>iPhone 5/5s</td>
<td style="text-align:center">320x568</td>
<td style="text-align:right">640x1136</td>
<td style="text-align:right">4’’</td>
</tr>
<tr>
<td>iPhone 6</td>
<td style="text-align:center">375x667</td>
<td style="text-align:right">750x1334</td>
<td style="text-align:right">4.7’’</td>
</tr>
<tr>
<td>iPhone 6 Plus</td>
<td style="text-align:center">414x736</td>
<td style="text-align:right">1242x2208(1080x1920)</td>
<td style="text-align:right">5.5’’</td>
</tr>
<tr>
<td>iPad 1/2</td>
<td style="text-align:center">768x1024</td>
<td style="text-align:right">768x1024</td>
<td style="text-align:right">9.7’’</td>
</tr>
<tr>
<td>iPad 3/4/air</td>
<td style="text-align:center">768x1024</td>
<td style="text-align:right">1536x2048</td>
<td style="text-align:right">9.7’’</td>
</tr>
<tr>
<td>iPad Mini</td>
<td style="text-align:center">768x1024</td>
<td style="text-align:right">768x1024</td>
<td style="text-align:right">7.9’’</td>
</tr>
<tr>
<td>iPad Mini 2</td>
<td style="text-align:center">768x1024</td>
<td style="text-align:right">1536x2048</td>
<td style="text-align:right">7.9’’</td>
</tr>
</tbody>
</table>
<p>Commonly used design elements of Safari (point):</p>
<table>
<thead>
<tr>
<th>Devices</th>
<th style="text-align:center">Height of Status Bar</th>
<th style="text-align:center">Height of Nav Bar(protrait)/when scroll</th>
<th style="text-align:center">Nav Bar when scroll(landscape)/when scroll</th>
<th style="text-align:center">Height of Tab Bar(portrait)/when scroll</th>
<th style="text-align:center">Height of Tab Bar(landscape)/when scroll</th>
<th style="text-align:right">landscape fullview (no status bar)</th>
</tr>
</thead>
<tbody>
<tr>
<td>ios5/iPhone</td>
<td style="text-align:center">20px</td>
<td style="text-align:center">60px/0px</td>
<td style="text-align:center">60px/0px</td>
<td style="text-align:center">44px/44px</td>
<td style="text-align:center">32px/32px</td>
<td style="text-align:right">YES</td>
</tr>
<tr>
<td>ios5/iPad</td>
<td style="text-align:center">20px</td>
<td style="text-align:center">60px/60px</td>
<td style="text-align:center">60px/60px</td>
<td style="text-align:center">44px/44px</td>
<td style="text-align:center">44px/44px</td>
<td style="text-align:right">NO</td>
</tr>
<tr>
<td>ios6/iPhone</td>
<td style="text-align:center">20px</td>
<td style="text-align:center">60px/0px</td>
<td style="text-align:center">60px/0px</td>
<td style="text-align:center">44px/44px</td>
<td style="text-align:center">32px/32px</td>
<td style="text-align:right">YES</td>
</tr>
<tr>
<td>ios6/iPad</td>
<td style="text-align:center">20px</td>
<td style="text-align:center">60px/60px</td>
<td style="text-align:center">60px/60px</td>
<td style="text-align:center">44px/44px</td>
<td style="text-align:center">44px/44px</td>
<td style="text-align:right">NO</td>
</tr>
<tr>
<td>ios7/iPhone</td>
<td style="text-align:center">20px</td>
<td style="text-align:center">44px/20px</td>
<td style="text-align:center">44px/0px</td>
<td style="text-align:center">44px/0px</td>
<td style="text-align:center">44px/0px</td>
<td style="text-align:right">YES</td>
</tr>
<tr>
<td>ios7/iPad</td>
<td style="text-align:center">20px</td>
<td style="text-align:center">44px/44px</td>
<td style="text-align:center">44px/44px</td>
<td style="text-align:center">32px/32px</td>
<td style="text-align:center">32px/32px</td>
<td style="text-align:right">NO</td>
</tr>
</tbody>
</table>
<h3 id="尺寸说明"><a href="#尺寸说明" class="headerlink" title="尺寸说明"></a>尺寸说明</h3><ol>
<li>iphone下，ios5，6竖屏滚动，上面的地址栏会消失，但是下面的tab bar不会消失。而在ios7下，竖屏滚动，上面的地址栏会变小，下面的tab bar会消失。</li>
<li>iphone下, 横屏都可以全屏，ios5,6需要手动点击，ios7自动全屏。全屏状态下，ios5,6 status可以消失。ios7下status不会消失。</li>
<li>ipad下，不可以全屏，且status bar + nav bar + tab bar固定大小。大小就是status bar + nav bar + tab bar的高度。</li>
<li>ios7下，页面如果设置100%高，实际高度还是可以滚动，需要强制样式上写入!important.</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.paintcodeapp.com/news/iphone-6-screens-demystified" target="_blank" rel="external">iPhone 6 Screens Demystified</a></li>
<li><a href="http://ivomynttinen.com/blog/the-ios-7-design-cheat-sheet/" target="_blank" rel="external">The iOS Design Cheat Sheet </a></li>
<li><a href="https://developer.apple.com/Library/ios/documentation/UserExperience/Conceptual/TransitionGuide/Bars.html" target="_blank" rel="external">iOS 7 UI Transition Guide</a></li>
<li><a href="http://www.kylejlarson.com/blog/2012/iphone-5-web-design/" target="_blank" rel="external">iPhone 5 Display Size and Web Design Tips</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要介绍下ios中safari的尺寸。ios界面主要被分割为如下几部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Status bar&lt;/li&gt;
&lt;li&gt;Navigation bar&lt;/li&gt;
&lt;li&gt;Content&lt;/li&gt;
&lt;li&gt;Tab bar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如图：&lt;br&gt;&lt;img src=&quot;http://www.idev101.com/code/User_Interface/img/bothPhones.jpg&quot; alt=&quot;Sizes of iPhone UI Elements&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="UI" scheme="http://finalhome.org/categories/UI/"/>
    
    
      <category term="UI" scheme="http://finalhome.org/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>margin和padding</title>
    <link href="http://finalhome.org/HTML&amp;CSS/margin%E5%92%8Cpadding/"/>
    <id>http://finalhome.org/HTML&amp;CSS/margin和padding/</id>
    <published>2014-07-18T06:41:36.000Z</published>
    <updated>2016-08-29T13:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>理解CSS的属性时，经常会对margin和padding的使用感到。。。。<br><a id="more"></a></p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul>
<li>构造函数<br>  var arr = new Array();</li>
<li>字面赋值<br>  var arr = [1,2,3];</li>
</ul>
<p>通常采用这两种方式。字面赋值的时候，注意元素末尾不要有多余的<code>,</code>号。会在IE中造成bug。</p>
<h2 id="长度问题"><a href="#长度问题" class="headerlink" title="长度问题"></a>长度问题</h2><p>获取数组的长度是<code>.length</code>属性，获取的是数组中元素的个数。但是数组访问是可以超过这个length的。获取的元素是<code>undefined</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理解CSS的属性时，经常会对margin和padding的使用感到。。。。&lt;br&gt;
    
    </summary>
    
      <category term="HTML/CSS" scheme="http://finalhome.org/categories/HTML-CSS/"/>
    
    
      <category term="CSS" scheme="http://finalhome.org/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText3使用指南</title>
    <link href="http://finalhome.org/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/SublimeText3%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://finalhome.org/开发工具/SublimeText3使用指南/</id>
    <published>2014-07-03T05:57:30.000Z</published>
    <updated>2016-08-29T13:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>选择一个好的编辑器，可以极大的提高你的开发效率。我使用过Vim、Emacs和SublimeText。个人还是比较推荐现代化的sublimeText编辑器配合vim,emacs的操作方式。</p>
<p>更多内容，可以查看官方推荐的非官方文档-&gt;<a href="http://docs.sublimetext.info/en/latest/index.html" target="_blank" rel="external">文档地址</a>。</p>
<a id="more"></a>
<h2 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h2><ul>
<li>ctrl+p，搜索。这个搜索可以左侧的Folders里所以文件，而且是模糊搜索，不需要完整的文件名。配合#, @, :可以搜索变量，函数，行数。</li>
<li>多行编辑。按住ctrl加左击，可以出现多个光标位置。</li>
<li>多重选择， ctrl+d可以多重选择，结合光标键，可以批量修改。</li>
<li>多屏编辑，alt+shift+数字键。</li>
<li>Projects，通过View-&gt;Side Bar-&gt;show Side Bar左侧文件结构管理。</li>
<li>snippet, 不同格式的文件，可以设置不同的snippet,就是简写，通过tab扩展成相应的内容。</li>
<li>各种插件支持</li>
<li>正则表达式搜索,比如我要删除所有的空行，可以使用<code>^[\s]*\n</code>来选择所有空行。可以使用<code>(?&lt;=&lt;h2&gt;).+(?=&lt;/h2&gt;)</code>来匹配h2标签内的内容。</li>
<li>ctrl+shift+p，功能菜单。只有你想不到，没有做不到的事情。</li>
</ul>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>ST3虽然没有提供稳定版本，但是相比ST2，速度提升还是很明显的。缺点就是插件不够完善，以及插件的编写全部采用Python3.x版本。这里给出ST3<a href="http://www.sublimetext.com/3" target="_blank" rel="external">下载地址</a>。</p>
<p>个人最喜欢的一点新特性是：新增了跳转到函数定义处功能，在大菜单Goto中可以查看到。</p>
<p>首次使用，建议先打开侧栏，方便管理文件结构。打开方式:<code>View-&gt;Side Bar-&gt;Show Side Bar</code>。</p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>插件通过<a href="https://sublime.wbond.net/installation#Simple" target="_blank" rel="external">Package Control</a>来管理。</p>
<h3 id="安装Package-Control"><a href="#安装Package-Control" class="headerlink" title="安装Package Control"></a>安装Package Control</h3><p>进入Package Control页面，选择对应版本的代码进行复制，比如ST3如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os,hashlib; h = &apos;7183a2d3e96f11eeadd761d777e62404&apos; + &apos;e330c659d4bb41d3bdf022e94cab3cd0&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</div></pre></td></tr></table></figure></p>
<p>使用<code>View-&gt;Show Console</code>打开控制台，粘贴复制的代码，敲击回车运行。待程序右下角提示<code>success</code>后，重启ST。</p>
<p>再次进入ST后，可以通过菜单<code>Preferences-&gt;Package Control</code>或者按键<code>ctrl+shift+p</code>查找<code>install package</code>。输入对应的插件名称，即可安装插件。</p>
<p>更多插件，可以通过Package Control中的<a href="https://sublime.wbond.net/search" target="_blank" rel="external">search</a>查找。</p>
<h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><p>配置包括Preferences-&gt;Settings-Default和Key Bindings-Default。</p>
<p>修改配置文件时，以上两个默认文件最好不要修改，自行讲需要设置的参数写入到Settings-User和Key Bindings-User里，它们会自动覆盖Default相同属性。</p>
<h3 id="备份配置"><a href="#备份配置" class="headerlink" title="备份配置"></a>备份配置</h3><p>配置文件的路径，点击Preferences-&gt;Browse Packages打开目录，找到User目录，这里的文件就是自己的配置文件，最好备份，方便下次替换。</p>
<h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="主题配色和代码配色"><a href="#主题配色和代码配色" class="headerlink" title="主题配色和代码配色"></a>主题配色和代码配色</h3><p>配色其实分为主题配色和代码配色。主题配色就是程序的外形设置，代码配色则是打开文件高亮显示的配置。</p>
<p>主题配色我使用的是<code>Theme-Phoenix</code>插件，代码配色选择的是<code>Dayle Rees Color Schemes</code>插件，对于字体，我也是进行了替换，在windows下推荐使用<code>yaheiconsolashybrid</code>。</p>
<p>插播一句，编程的字体应该选择等宽类型的。</p>
<p>安装完了插件，可以在<code>Perferences-&gt;Color Scheme</code>中查看修改。也可以通过配置文件修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;caret_style&quot;: &quot;phase&quot;,</div><div class="line">    &quot;color_scheme&quot;: &quot;Packages/User/theme/Peacock (SL).tmTheme&quot;,</div><div class="line">    &quot;default_line_ending&quot;: &quot;unix&quot;,</div><div class="line">    &quot;font_face&quot;: &quot;YaHei Consolas Hybrid&quot;,</div><div class="line">    &quot;font_size&quot;: 16.0,</div><div class="line">    &quot;highlight_line&quot;: true,</div><div class="line">    &quot;hot_exit&quot;: false,</div><div class="line">    &quot;ignored_packages&quot;:</div><div class="line">    [</div><div class="line">        &quot;Vintage&quot;</div><div class="line">    ],</div><div class="line">    &quot;phoenix_color_green&quot;: true,</div><div class="line">    &quot;phoenix_dirty_bottom_bar_red&quot;: true,</div><div class="line">    &quot;phoenix_eighties&quot;: true,</div><div class="line">    &quot;phoenix_highlight_current_tab&quot;: true,</div><div class="line">    &quot;phoenix_sidebar_tree_large&quot;: true,</div><div class="line">    &quot;phoenix_solid_current_tab&quot;: true,</div><div class="line">    &quot;phoenix_tabs_medium&quot;: true,</div><div class="line">    &quot;rulers&quot;:</div><div class="line">    [</div><div class="line">        80,</div><div class="line">        100,</div><div class="line">        120</div><div class="line">    ],</div><div class="line">    &quot;soda_folder_icons&quot;: false,</div><div class="line">    &quot;tab_size&quot;: 4,</div><div class="line">    &quot;theme&quot;: &quot;Phoenix Dark.sublime-theme&quot;,</div><div class="line">    &quot;translate_tabs_to_spaces&quot;: true,</div><div class="line">    &quot;word_separators&quot;: &quot;./\\()\&quot;&apos;:,.;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;`~?&quot;,</div><div class="line">    &quot;word_wrap&quot;: true,</div><div class="line">    &quot;wrap_width&quot;: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我列出的是我的全部配置文件，可以看到相关的主题配色、代码配色和字体设置。</p>
<h3 id="ST辅助类"><a href="#ST辅助类" class="headerlink" title="ST辅助类"></a>ST辅助类</h3><ul>
<li><p><strong>SideBarEnhancements</strong><br>提升右侧导航栏功能</p>
</li>
<li><p><strong>Sublimerge Pro</strong><br>文件对比功能</p>
</li>
<li><p><strong>Markdown Preview</strong><br>书写markdown格式文本，预览等功能。</p>
</li>
<li><p><strong>Terminal</strong><br>直接在对应文件所在目录打开terminal功能。</p>
</li>
</ul>
<h3 id="代码显示辅助类"><a href="#代码显示辅助类" class="headerlink" title="代码显示辅助类"></a>代码显示辅助类</h3><ul>
<li><p><strong>BracketHighlighter</strong><br>高亮显示匹配括号，会在左侧的行号标识处显示对应的括号位置和范围。</p>
</li>
<li><p><strong>HTML-CSS-JS Prettify</strong><br>格式化代码工具，默认快捷键<code>ctrl+shift+h</code>。</p>
</li>
<li><p><strong>CSScomb JS</strong><br>按照一定规律格式化CSS的属性顺序。</p>
</li>
</ul>
<h3 id="代码书写辅助类"><a href="#代码书写辅助类" class="headerlink" title="代码书写辅助类"></a>代码书写辅助类</h3><ul>
<li><p><strong>Emmet</strong><br>必装插件，辅助书写HTML, CSS。</p>
</li>
<li><p><strong>AutoFileName</strong><br>书写代码时，自动提示补充文件路径。</p>
</li>
<li><p><strong>DocBlockr</strong><br>辅助书写注释</p>
</li>
<li><p><strong>JSHint Gutter</strong><br>利用<code>jslint</code>检测js代码是否规范的插件。</p>
</li>
<li><p><strong>LiveStyle</strong><br>配合对应的chrome插件，可以达到修改文件后，自动刷新页面的效果。但目前对<code>less</code>,<code>sass</code>之类预编译语言支持不够好。</p>
</li>
</ul>
<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h3 id="快捷键操作"><a href="#快捷键操作" class="headerlink" title="快捷键操作"></a>快捷键操作</h3><p>默认的快捷操作，可以查看<code>Preferences-&gt;Key Binding</code>，或者文档:<a href="http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_win.html" target="_blank" rel="external">Keyboard Shortcuts-Windows/Linux</a>和<a href="http://docs.sublimetext.info/en/latest/reference/keyboard_shortcuts_osx.html" target="_blank" rel="external">Keyboard Shortcuts-OSX</a>。</p>
<p>个人常用的快捷键设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">/*============= Emacs Style =============*/</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+b&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: &#123;&quot;by&quot;: &quot;characters&quot;, &quot;forward&quot;: false&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+f&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: &#123;&quot;by&quot;: &quot;characters&quot;, &quot;forward&quot;: true&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+p&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: &#123;&quot;by&quot;: &quot;lines&quot;, &quot;forward&quot;:</div><div class="line">false&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+n&quot;], &quot;command&quot;: &quot;move&quot;, &quot;args&quot;: &#123;&quot;by&quot;: &quot;lines&quot;, &quot;forward&quot;:</div><div class="line">true&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+a&quot;], &quot;command&quot;: &quot;move_to&quot;, &quot;args&quot;: &#123;&quot;to&quot;: &quot;bol&quot;, &quot;extend&quot;: false&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+e&quot;], &quot;command&quot;: &quot;move_to&quot;, &quot;args&quot;: &#123;&quot;to&quot;: &quot;eol&quot;, &quot;extend&quot;: false&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+l&quot;], &quot;command&quot;: &quot;show_at_center&quot; &#125;,</div><div class="line">/*============= End Emacs Style =============*/</div><div class="line"></div><div class="line">/*============= switch tabs =============*/</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+1&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 0 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+2&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 1 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+3&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 2 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+4&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 3 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+5&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 4 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+6&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 5 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+7&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 6 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+8&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 7 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+9&quot;], &quot;command&quot;: &quot;select_by_index&quot;, &quot;args&quot;: &#123; &quot;index&quot;: 8 &#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+shift+t&quot;], &quot;command&quot;: &quot;reopen_last_file&quot; &#125;,</div><div class="line">/*============= End switch tabs =============*/</div><div class="line"></div><div class="line">/*============= Modify Default key-mapping  =============*/</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+a&quot;], &quot;command&quot;: &quot;select_all&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+t&quot;], &quot;command&quot;: &quot;new_file&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;f5&quot;], &quot;command&quot;: &quot;open_in_browser&quot; &#125;,</div><div class="line">// autocomplate</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+/&quot;], &quot;command&quot;: &quot;auto_complete&quot; &#125;,</div><div class="line">// paste</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+v&quot;], &quot;command&quot;: &quot;paste_and_indent&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+shift+v&quot;], &quot;command&quot;: &quot;paste&quot; &#125;,</div><div class="line">// reindex</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+i&quot;], &quot;command&quot;: &quot;reindent&quot; &#125;,</div><div class="line">// find and goto</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+f&quot;], &quot;command&quot;: &quot;show_panel&quot;, &quot;args&quot;: &#123;&quot;panel&quot;: &quot;find&quot;&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+g&quot;], &quot;command&quot;: &quot;find_all_under&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+p&quot;], &quot;command&quot;: &quot;show_overlay&quot;, &quot;args&quot;: &#123;&quot;overlay&quot;: &quot;goto&quot;, &quot;show_files&quot;: true&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+r&quot;], &quot;command&quot;: &quot;show_overlay&quot;, &quot;args&quot;: &#123;&quot;overlay&quot;: &quot;goto&quot;, &quot;text&quot;: &quot;@&quot;&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+l&quot;], &quot;command&quot;: &quot;show_overlay&quot;, &quot;args&quot;: &#123;&quot;overlay&quot;: &quot;goto&quot;, &quot;text&quot;: &quot;:&quot;&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+;&quot;], &quot;command&quot;: &quot;show_overlay&quot;, &quot;args&quot;: &#123;&quot;overlay&quot;: &quot;goto&quot;, &quot;text&quot;: &quot;#&quot;&#125; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+d&quot;], &quot;command&quot;: &quot;goto_definition&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+-&quot;], &quot;command&quot;: &quot;jump_back&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;alt+=&quot;], &quot;command&quot;: &quot;jump_forward&quot; &#125;,</div><div class="line">/*============= End Modify Default key-mapping  =============*/</div><div class="line"></div><div class="line">/*============= Plugin =============*/</div><div class="line">// Emmet expand</div><div class="line">&#123;&quot;keys&quot;: [&quot;alt+e&quot;], &quot;args&quot;: &#123;&quot;action&quot;: &quot;expand_abbreviation&quot;&#125;, &quot;command&quot;: &quot;run_emmet_action&quot;, &quot;context&quot;: [&#123;&quot;key&quot;: &quot;emmet_action_enabled.expand_abbreviation&quot;&#125; ] &#125;,</div><div class="line">// js Hint Grunt</div><div class="line">&#123;&quot;keys&quot;: [&quot;alt+j&quot;], &quot;command&quot;: &quot;jshint&quot;&#125;,</div><div class="line">// markdown preview</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: &#123;&quot;target&quot;: &quot;browser&quot;, &quot;parser&quot;:&quot;markdown&quot;&#125; &#125;,</div><div class="line">// terminal</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+alt+t&quot;], &quot;command&quot;: &quot;open_terminal&quot; &#125;,</div><div class="line">&#123; &quot;keys&quot;: [&quot;ctrl+shift+alt+t&quot;], &quot;command&quot;: &quot;open_terminal_project_folder&quot; &#125;</div><div class="line">/*============= End Plugin =============*/</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>其中涉及到了emacs移动光标，多标签切换，以及快速查找等方式。</p>
<h3 id="snippet"><a href="#snippet" class="headerlink" title="snippet"></a>snippet</h3><p>snippet是代码片段，可以方便的自动补全。创建方式通过<code>Tools-&gt;New Snippet</code>完成。</p>
<p>默认的文件如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;snippet&gt;</div><div class="line">    &lt;content&gt;&lt;![CDATA[</div><div class="line">Hello, $&#123;1:this&#125; is a $&#123;2:snippet&#125;.</div><div class="line">]]&gt;&lt;/content&gt;</div><div class="line">    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</div><div class="line">    &lt;!-- &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt; --&gt;</div><div class="line">    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</div><div class="line">    &lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;</div><div class="line">&lt;/snippet&gt;</div></pre></td></tr></table></figure></p>
<p>代码段写在<code>CDATA[]</code>中，<code>${}</code>为占位字符。 </p>
<p><code>tabTrigger</code>为自动补全需要的字符，<code>scope</code>设置的是文件格式。</p>
<p>创建完成之后，个人建议保存在<code>User-&gt;snippet</code>目录下，<code>snippet</code>需要自行创建，方便管理。</p>
<h3 id="build命令和Macro命令"><a href="#build命令和Macro命令" class="headerlink" title="build命令和Macro命令"></a>build命令和Macro命令</h3><p>这些命令的使用请参考文档-&gt;<a href="http://docs.sublimetext.info/en/latest/reference/reference.html" target="_blank" rel="external">Reference</a>。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="http://www.sublimetext.com/" target="_blank" rel="external">sublimeText官网</a></li>
<li><a href="http://docs.sublimetext.info/en/latest" target="_blank" rel="external">非官方手册</a></li>
<li><a href="https://sublime.wbond.net/installation#Simple" target="_blank" rel="external">Package Control</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;选择一个好的编辑器，可以极大的提高你的开发效率。我使用过Vim、Emacs和SublimeText。个人还是比较推荐现代化的sublimeText编辑器配合vim,emacs的操作方式。&lt;/p&gt;
&lt;p&gt;更多内容，可以查看官方推荐的非官方文档-&amp;gt;&lt;a href=&quot;http://docs.sublimetext.info/en/latest/index.html&quot;&gt;文档地址&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://finalhome.org/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="SublimeText" scheme="http://finalhome.org/tags/SublimeText/"/>
    
  </entry>
  
  <entry>
    <title>nodejs开发命名行工具</title>
    <link href="http://finalhome.org/Nodejs/nodejs%E5%BC%80%E5%8F%91%E5%91%BD%E5%90%8D%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <id>http://finalhome.org/Nodejs/nodejs开发命名行工具/</id>
    <published>2014-07-02T06:31:46.000Z</published>
    <updated>2016-08-29T13:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>受启发的缘由一个是<a href="https://github.com/Edmeral/nodecup" target="_blank" rel="external">nodecup</a>项目，可以命令行形式查看世界杯赛程。另一个是<a href="https://visionmedia.github.io/commander.js/" target="_blank" rel="external">commander</a>, 方便编写命令行工具的库。</p>
<p>结合起来，我觉得对以后的自动化部署会有帮助，所以先尝试去写一个获取天气的命令行工具。<br><a id="more"></a></p>
<h2 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h2><p>我想要做的是通过命名行的方式，直接查询当前时刻的天气，以及最近几天的天气情况。命名行下我预测会出现的问题就是获取当前位置，所以默认情况还是需要手动输入一个城市名称。</p>
<p>项目我放在了github上，使用的是Node.js完成。项目地址:<a href="https://github.com/leohxj/nodeweather" target="_blank" rel="external">nodeweather</a>。</p>
<h2 id="天气API"><a href="#天气API" class="headerlink" title="天气API"></a>天气API</h2><p>关于天气的API，知乎上有一个讨论<a href="http://www.zhihu.com/question/20575288" target="_blank" rel="external">网上的天气 API 哪一个更加可靠？</a>。</p>
<p>我相信中国天气的API比较官方，但是个人使用需要申请验证，<a href="http://smart.weather.com.cn/wzfw/smart/weatherapi.shtml" target="_blank" rel="external">验证方式</a>。使用过程中，也是需要根据城市查询到对应的城市代码才可以查询，不是很方便，因为网上没有直接查询这些城市代码的接口。我可能需要自行建立数据库。</p>
<p>接下来我想到了Yahoo Weather， 目前很多天气源也是引用的雅虎数据。它的在线手册是:<a href="https://developer.yahoo.com/weather/#response" target="_blank" rel="external">yahoo weather</a>。使用雅虎天气的API，需要有一个<code>woeid</code>，这个正常情况下需要申请yahoo的Developer API。但是幸运的是我发现一个地址可以通过城市名称查询这个<code>woeid</code>，在线地址<code>http://query.yahooapis.com/v1/public/yql?q=select*from%20geo.places%20where%20text=%22%22&amp;format=xml</code>，传入的城市名称设置在<code>text=%22%22</code>两个<code>%22</code>中。返回的是XML格式数据。里面会有响应的<code>woeid</code>。</p>
<p>获取到了<code>woeid</code>之后，我们可以通过雅虎天气的API查询天气了，查询方式如下：<code>http://weather.yahooapis.com/forecastrss?w=615702&amp;u=c</code>。参数<code>woeid</code>就是城市对应的代码，<code>u=c</code>代表查询的是摄氏温度。当然，返回的对象依旧是XML格式。</p>
<h2 id="处理XML"><a href="#处理XML" class="headerlink" title="处理XML"></a>处理XML</h2><p>因为是在服务器端处理，并且使用的是node.js环境。我还是习惯性的使用<code>jQuery</code>去解析XML。</p>
<p>在nodejs中使用jQuery，会有一个问题就是缺少window变量。需要引入<code>jsdom</code>帮助创建<code>window</code>对象。</p>
<p>官方的使用方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">In Node.JS you may also create separate window instances</div><div class="line"> </div><div class="line">    var jsdom = require(&apos;jsdom&apos;).jsdom</div><div class="line">      , myWindow = jsdom().createWindow()</div><div class="line">      , $ = require(&apos;jQuery&apos;)</div><div class="line">      , jq = require(&apos;jQuery&apos;).create()</div><div class="line">      , jQuery = require(&apos;jQuery&apos;).create(myWindow)</div><div class="line">      ;</div><div class="line"> </div><div class="line">    $(&quot;&lt;h1&gt;test passes&lt;/h1&gt;&quot;).appendTo(&quot;body&quot;);</div><div class="line">    console.log($(&quot;body&quot;).html());</div><div class="line"> </div><div class="line">    jq(&quot;&lt;h2&gt;other test passes&lt;/h2&gt;&quot;).appendTo(&quot;body&quot;);</div><div class="line">    console.log(jq(&quot;body&quot;).html());</div><div class="line"> </div><div class="line">    jQuery(&quot;&lt;h3&gt;third test passes&lt;/h3&gt;&quot;).appendTo(&quot;body&quot;);</div><div class="line">    console.log(jQuery(&quot;body&quot;).html());</div></pre></td></tr></table></figure></p>
<p>我个人创建window使用的方式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var jsdom = require(&quot;jsdom&quot;);</div><div class="line">var $ = require(&quot;jquery&quot;)(jsdom.jsdom().createWindow());</div></pre></td></tr></table></figure></p>
<p>nodejs处理网络请求使用的模块是<code>request</code>, 具体使用参考文档即可。</p>
<h2 id="脚本的编写"><a href="#脚本的编写" class="headerlink" title="脚本的编写"></a>脚本的编写</h2><p>这里如要提及一下脚本的编写问题，我是在windows下写的程序，但是为了保证程序在unix下正常工作，我需要在文件头部声明好系统的环境变量，nodejs写的脚本应该为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#!usr/bin/env node</div></pre></td></tr></table></figure>
<p>sublimetext编辑器需要注意设置<code>view-&gt;line-coding</code>为<code>unix</code>模式，如果模式是<code>windows</code>，在unix下，换行会多出<code>/r</code>字符，报错信息大致为<code>ERROE env: node/r</code>。</p>
<p>本地测试的使用，你使用的是<code>node xxx</code>形式，只要你在<code>package.json</code>中指定了:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;main&quot;: &quot;./nodeweather&quot;,</div><div class="line">  &quot;bin&quot;: &#123;</div><div class="line">    &quot;nodeweather&quot;: &quot;./nodeweather.js&quot;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>上传至npm之后，再下载就可以直接使用xxx形式。</p>
<h2 id="上传NPM"><a href="#上传NPM" class="headerlink" title="上传NPM"></a>上传NPM</h2><p>首先，你需要拥有一个npm的账号，然后正确的设置好<code>package.json</code>。</p>
<p>使用<code>npm adduser</code>进行验证，使用<code>npm publish</code>上传文件至npm。</p>
<p>完成之后，就可以在任意环境下使用<code>npm install xxx</code>安装了。</p>
<h2 id="不借助commander的情况"><a href="#不借助commander的情况" class="headerlink" title="不借助commander的情况"></a>不借助commander的情况</h2><p>有时候我们只是写一段脚本，想要在全局运行，那么也很简单。</p>
<p>首先确保项目中存在<code>package.json</code>文件，如果没有，自行<code>npm init</code>一个，比如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;sayhi&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;bin&quot;: &#123;</div><div class="line">    &quot;hw&quot;: &quot;index.js&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中特别要注意的是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;bin&quot;: &#123;</div><div class="line">  &quot;hw&quot;: &quot;index.js&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段，标明了希望使用<code>hw</code>达到<code>node index.js</code>的目的。</p>
<p>其次我们要在脚本文件的开头，加上:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#!usr/bin/env node</div></pre></td></tr></table></figure>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>使用<code>npm install -g</code>或者<code>npm link</code>即可。<br>然后全局下就可以使用了。</p>
<p>这里区分一下<code>npm install -g</code>与<code>npm link</code>的区别：</p>
<ul>
<li><code>npm install -g</code>安装的相当于硬链接，只保留当前版本，本地修改项目不会同步到命令中。</li>
<li><code>npm link</code>其实就是一个软连接，本地的任何修改都能同步到命令之中。</li>
</ul>
<h3 id="撤销全局安装"><a href="#撤销全局安装" class="headerlink" title="撤销全局安装"></a>撤销全局安装</h3><p><code>npm uninstall -g &lt;name&gt;</code></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.yahoo.com/weather" target="_blank" rel="external">Yahoo Weather API</a></li>
<li><a href="http://android-er.blogspot.jp/2012/03/search-woeid-from-httpqueryyahooapiscom.html" target="_blank" rel="external">获取城市WOEID代码方式</a></li>
<li><a href="https://github.com/Edmeral/nodecup" target="_blank" rel="external">nodecup</a></li>
<li><a href="https://visionmedia.github.io/commander.js/" target="_blank" rel="external">commander</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;受启发的缘由一个是&lt;a href=&quot;https://github.com/Edmeral/nodecup&quot;&gt;nodecup&lt;/a&gt;项目，可以命令行形式查看世界杯赛程。另一个是&lt;a href=&quot;https://visionmedia.github.io/commander.js/&quot;&gt;commander&lt;/a&gt;, 方便编写命令行工具的库。&lt;/p&gt;
&lt;p&gt;结合起来，我觉得对以后的自动化部署会有帮助，所以先尝试去写一个获取天气的命令行工具。&lt;br&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://finalhome.org/categories/Nodejs/"/>
    
    
      <category term="nodejs" scheme="http://finalhome.org/tags/nodejs/"/>
    
      <category term="commander" scheme="http://finalhome.org/tags/commander/"/>
    
  </entry>
  
</feed>
